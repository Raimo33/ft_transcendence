services:

  app:
    build:
      context: ./services/app
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      # args:
    container_name: app
    # environment:
    # volumes:
    # secrets:
    ports:
      - "3000:3000"
    networks:
      - core
    restart: always
    depends_on:
      nginx:
        condition: service_healthy
    init: true

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      # args:
    volumes:
      - frontend_data:/var/www/html
  
  match_state:
    build:
      context: ./services/match_state
      additional_contexts:
        - protos=./protos
        - certs=./certs
      dockerfile: Dockerfile
      # args:
    container_name: match_state
    # environment:
    # volumes:
    # secrets:
    ports:
      - "50051:50051"
      - "8080:8080"
    networks:
      - core
    restart: always
    depends_on:
      nginx:
        condition: service_healthy
    init: true

  nginx:
    build:
      context: ./services/nginx
      additional_contexts:
        - certs=./certs
      dockerfile: Dockerfile
      # args:
    container_name: nginx
    # environment:
    volumes:
      - frontend_data:/var/www/html:ro
    secrets:
      - source: nginx_key
        target: /etc/ssl/private/nginx.key
    ports:
      - "80:80"
      - "443:443"
    networks:
      - edge
    restart: always
    # depends_on:
    init: true
  
  notification:
    build:
      context: ./services/notification
      additional_contexts:
        - protos=./protos
        - certs=./certs
      dockerfile: Dockerfile
      # args:
    container_name: notification
    # environment:
    # volumes:
    # secrets:
    ports:
      - "50051:50051"
      - "3000:3000"
    networks:
      - core
    restart: always
    depends_on:
      nginx:
        condition: service_healthy
    init: true

  postgresql:
    build:
      context: ./services/postgresql
      dockerfile: Dockerfile
      # args:
    container_name: postgresql
    # environment:
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    # secrets:
    ports:
      - "5432:5432"
    networks:
      - data
    restart: always
    # depends_on:
    init: true

  memcached:
    build:
      context: ./services/memcached
      dockerfile: Dockerfile
      # args:
    container_name: memcached
    # environment:
    # volumes:
    # secrets:
    ports:
      - "11211:11211"
    networks:
      - data
    restart: always
    # depends_on:
    init: true

  logging:
    build:
      context: ./services/logging
      dockerfile: Dockerfile
      # args:
    container_name: logging
    # environment:
    # volumes:
    # secrets:
    ports:
    networks:
      - monitoring
    restart: always
    # depends_on:
    init: true

volumes:
  postgresql_data:
  frontend_data:
  logs: #TODO: Add logs volume

secrets:
  jwt_private_key:
    file: ./secrets/jwtRS256.key
  nginx_key:
    file: ./secrets/nginx.key

networks:
  edge:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/30
  core:
    internal: true
  data:
    internal: true
  monitoring:
    internal: true
