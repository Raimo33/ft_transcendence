services:

  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
      args:
    
    container_name: nginx
    environment:
    volumes:
    
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend
    restart: always
    depends_on:
    init: true
  
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      args:
    
    container_name: api-gateway
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - edgenet
    restart: always
    depends_on:
    init: true
  
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
      args:
    
    container_name: user-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  match-service:
    build:
      context: ./services/match-service
      dockerfile: Dockerfile
      args:
    
    container_name: match-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  tournament-service:
    build:
      context: ./services/tournament-service
      dockerfile: Dockerfile
      args:
    
    container_name: tournament-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  keycloak:
    build:
      context: ./services/keycloak
      dockerfile: Dockerfile
      args:
    
    container_name: keycloak
    environment:
    volumes:
    
    ports:
      -
    networks:
      - corenet
    restart: always
    depends_on:
    init: true

  matchmaking-service:
    build:
      context: ./services/matchmaking-service
      dockerfile: Dockerfile
      args:
    
    container_name: matchmaking-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  game-state-service:
    build:
      context: ./services/game-state-service
      dockerfile: Dockerfile
      args:
    
    container_name: game-state-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
      args:
    
    container_name: ai-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  query-service:
    build:
      context: ./services/query-service
      dockerfile: Dockerfile
      args:
    
    container_name: query-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true

  postgresql:
    build:
      context: ./services/postgresql
      dockerfile: Dockerfile
      args:
    
    container_name: postgresql
    environment:
    volumes:
    
    ports:
      - "5432:5432"
    networks:
      - datanet
    restart: always
    depends_on:
    init: true
  
  blockchain-service:
    build:
      context: ./services/blockchain-service
      dockerfile: Dockerfile
      args:
    
    container_name: blockchain-service
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true
  
  redis:
    build:
      context: ./services/redis
      dockerfile: Dockerfile
      args:
    
    container_name: redis
    environment:
    volumes:
    
    ports:
      - "6379:6379"
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  geth:
    build:
      context: ./services/geth
      dockerfile: Dockerfile
      args:
    
    container_name: geth
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true

  prometheus:
    build:
      context: ./services/prometheus
      dockerfile: Dockerfile
      args:
    
    container_name: prometheus
    environment:
    volumes:
    
    ports:
      - "9090:9090"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  grafana:
    build:
      context: ./services/grafana
      dockerfile: Dockerfile
      args:
    
    container_name: grafana
    environment:
    volumes:
    
    ports:
      - "3000:3000"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  logstash:
    build:
      context: ./services/logstash
      dockerfile: Dockerfile
      args:
    
    container_name: logstash
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  elasticsearch:
    build:
      context: ./services/elasticsearch
      dockerfile: Dockerfile
      args:
    
    container_name: elasticsearch
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  kibana:
    build:
      context: ./services/kibana
      dockerfile: Dockerfile
      args:
    
    container_name: kibana
    environment:
    volumes:
    
    ports:
      - "5601:5601"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true

volumes:

secrets:

networks:
  edgenet:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/30
  corenet:
    internal: true
  datanet:
    internal: true
  monitoringnet:
    internal: true

  

