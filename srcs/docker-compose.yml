services:

  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
      args:
    
    container_name: nginx
    environment:
    volumes:
    secrets:
      - source: nginx-cert
        target: /etc/ssl/certs/nginx.crt
      - source: nginx-key
        target: /etc/ssl/private/nginx.key
    
    ports:
      - "80:80"
      - "443:443"
    networks:
      - edgenet
    restart: always
    depends_on:
    init: true

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      args:
    
    container_name: api-gateway
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - KEYCLOAK_DOMAIN=${KEYCLOAK_DOMAIN}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CERTS=${KEYCLOAK_CERTS}
      - JWT_CACHE_EXPIRY=${JWT_CACHE_EXPIRY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
    volumes:
    
    ports:
      - "3000:3000"
    networks:
      - edgenet
    restart: always
    depends_on:
    init: true

  redis-edge:
    build:
      context: ./services/redis-edge
      dockerfile: Dockerfile
      args:
    
    container_name: redis-edge
    environment:
    volumes:
    
    ports:
      - "6379:6379"
    networks:
      - edgenet
    restart: always
    depends_on:
    init: true
  
  user:
    build:
      context: ./services/user
      dockerfile: Dockerfile
      args:
    
    container_name: user
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  match:
    build:
      context: ./services/match
      dockerfile: Dockerfile
      args:
    
    container_name: match
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  tournament:
    build:
      context: ./services/tournament
      dockerfile: Dockerfile
      args:
    
    container_name: tournament
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  keycloak:
    build:
      context: ./services/keycloak
      dockerfile: Dockerfile
      args:
    
    container_name: keycloak
    environment:
    volumes:
    
    ports:
      -
    networks:
      - corenet
    restart: always
    depends_on:
    init: true

  matchmaking:
    build:
      context: ./services/matchmaking
      dockerfile: Dockerfile
      args:
    
    container_name: matchmaking
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  game-state:
    build:
      context: ./services/game-state
      dockerfile: Dockerfile
      args:
    
    container_name: game-state
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  ai:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
      args:
    
    container_name: ai
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  query:
    build:
      context: ./services/query
      dockerfile: Dockerfile
      args:
    
    container_name: query
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true

  postgresql:
    build:
      context: ./services/postgresql
      dockerfile: Dockerfile
      args:
    
    container_name: postgresql
    environment:
    volumes:
    
    ports:
      - "5432:5432"
    networks:
      - datanet
    restart: always
    depends_on:
    init: true
  
  blockchain:
    build:
      context: ./services/blockchain
      dockerfile: Dockerfile
      args:
    
    container_name: blockchain
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true
  
  redis-core:
    build:
      context: ./services/redis-core
      dockerfile: Dockerfile
      args:
    
    container_name: redis
    environment:
    volumes:
    
    ports:
      - "6379:6379"
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  geth:
    build:
      context: ./services/geth
      dockerfile: Dockerfile
      args:
    
    container_name: geth
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true

  prometheus:
    build:
      context: ./services/prometheus
      dockerfile: Dockerfile
      args:
    
    container_name: prometheus
    environment:
    volumes:
    
    ports:
      - "9090:9090"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  grafana:
    build:
      context: ./services/grafana
      dockerfile: Dockerfile
      args:
    
    container_name: grafana
    environment:
    volumes:
    
    ports:
      - "3000:3000"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  logstash:
    build:
      context: ./services/logstash
      dockerfile: Dockerfile
      args:
    
    container_name: logstash
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  elasticsearch:
    build:
      context: ./services/elasticsearch
      dockerfile: Dockerfile
      args:
    
    container_name: elasticsearch
    environment:
    volumes:
    
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  kibana:
    build:
      context: ./services/kibana
      dockerfile: Dockerfile
      args:
    
    container_name: kibana
    environment:
    volumes:
    
    ports:
      - "5601:5601"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true

volumes:

secrets:
  nginx-cert:
  nginx-key:

networks:
  edgenet:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/30
  corenet:
    internal: true
  datanet:
    internal: true
  monitoringnet:
    internal: true
