services:

  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
      args:
    
    container_name: nginx
    environment:
    volumes:
      - nginx-cert:/etc/ssl/certs/nginx.crt:ro
      - api_gateway_cert:/etc/ssl/certs/api_gateway.crt:ro
    secrets:
      - source: nginx-key
        target: /etc/ssl/private/nginx.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "80:80"
      - "443:443"
    networks:
      - edgenet
    restart: always
    depends_on:
    init: true

  api_gateway:
    build:
      context: ./services/api_gateway
      dockerfile: Dockerfile
      args:
    container_name: api_gateway
    environment:
    volumes:
      - ./services/api_gateway/shared/:/shared/:ro
      - api_gateway_cert:/etc/ssl/certs/api_gateway.crt:ro
      - user_cert:/etc/ssl/certs/user.crt:ro
      - match_cert:/etc/ssl/certs/match.crt:ro
      - tournament_cert:/etc/ssl/certs/tournament.crt:ro
      - keycloak_cert:/etc/ssl/certs/keycloak.crt:ro
    secrets:
      - source: api_gateway_key
        target: /etc/ssl/private/api_gateway.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "3000:3000"
    networks:
      - edgenet
    restart: always
    depends_on:
      nginx:
        condition: service_healthy
    init: true
  
  user:
    build:
      context: ./services/user
      dockerfile: Dockerfile
      args:
    
    container_name: user
    environment:
    volumes:
      - user_cert:/etc/ssl/certs/user.crt:ro
      - keycloak_cert:/etc/ssl/certs/keycloak.crt:ro
      - query_cert:/etc/ssl/certs/query.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: user_key
        target: /etc/ssl/private/user.key
        uid: #TODO uid
        mode: 0400
    
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  match:
    build:
      context: ./services/match
      dockerfile: Dockerfile
      args:
    
    container_name: match
    environment:
    volumes:
      - match_cert:/etc/ssl/certs/match.crt:ro
      - game-state_cert:/etc/ssl/certs/game-state.crt:ro
      - query_cert:/etc/ssl/certs/query.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: match_key
        target: /etc/ssl/private/match.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  tournament:
    build:
      context: ./services/tournament
      dockerfile: Dockerfile
      args:
    
    container_name: tournament
    environment:
    volumes:
      - tournament_cert:/etc/ssl/certs/tournament.crt:ro
      - game-state_cert:/etc/ssl/certs/game-state.crt:ro
      - query_cert:/etc/ssl/certs/query.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: tournament_key
        target: /etc/ssl/private/tournament.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  keycloak:
    build:
      context: ./services/keycloak
      dockerfile: Dockerfile
      args:
    
    container_name: keycloak
    environment:
    volumes:
      - keycloak_cert:/etc/ssl/certs/keycloak.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: keycloak_key
        target: /etc/ssl/certs/keycloak.key
        uid: #TODO uid
        mode: 0400
    ports:
      -
    networks:
      - corenet
    restart: always
    depends_on:
    init: true

  matchmaking:
    build:
      context: ./services/matchmaking
      dockerfile: Dockerfile
      args:
    
    container_name: matchmaking
    environment:
    volumes:
      - matchmaking_cert:/etc/ssl/certs/matchmaking.crt:ro
      - ai_cert:/etc/ssl/certs/ai.crt:ro
      - query_cert:/etc/ssl/certs/query.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: matchmaking_key
        target: /etc/ssl/certs/matchmaking.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  game-state:
    build:
      context: ./services/game-state
      dockerfile: Dockerfile
      args:
    
    container_name: game-state
    environment:
    volumes:
      - ai_cert:/etc/ssl/certs/ai.crt:ro
      - nginx_cert:/etc/ssl/certs/nginx.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: game-state_key
        target: /etc/ssl/certs/game-state.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  ai:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
      args:
    
    container_name: ai
    environment:
    volumes:
      - ai_cert:/etc/ssl/certs/ai.crt:ro
      - game-state_cert:/etc/ssl/certs/game-state.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets: 
      - source: ai_key
        target: /etc/ssl/certs/ai.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  query:
    build:
      context: ./services/query
      dockerfile: Dockerfile
      args:
    
    container_name: query
    environment:
    volumes:
      - query_cert:/etc/ssl/certs/query.crt:ro
      - postgresql_cert:/etc/ssl/certs/postgresql.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: query_key
        target: /etc/ssl/certs/query.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 50052:50052
    networks:
      - datanet
    restart: always
    depends_on:
    init: true

  postgresql:
    build:
      context: ./services/postgresql
      dockerfile: Dockerfile
      args:

    container_name: postgresql
    environment:
      - DB_NAME=${DB_NAME}
    volumes:
      - postgresql_cert:/etc/ssl/certs/postgresql.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: postgresql_key
        target: /etc/ssl/certs/postgresql.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "5432:5432"
    networks:
      - datanet
    restart: always
    depends_on:
    init: true
  
  blockchain:
    build:
      context: ./services/blockchain
      dockerfile: Dockerfile
      args:
    
    container_name: blockchain
    environment:
    volumes:
      - blockchain_cert:/etc/ssl/certs/blockchain.crt:ro
      - geth_cert:/etc/ssl/certs/geth.crt:ro
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: blockchain_key
        target: /etc/ssl/certs/blockchain.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true
  
  redis-core:
    build:
      context: ./services/redis-core
      dockerfile: Dockerfile
      args:
    
    container_name: redis
    environment:
    volumes:
      - redis-core_cert:/etc/ssl/certs/redis-core.crt:ro
    secrets:
      - source: redis-core_key
        target: /etc/ssl/private/redis-core.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "6379:6379"
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  geth:
    build:
      context: ./services/geth
      dockerfile: Dockerfile
      args:
    
    container_name: geth
    environment:
    volumes:
      - geth_cert:/etc/ssl/certs/geth.crt:ro
    secrets:
      - source: geth_key
        target: /etc/ssl/private/geth.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - datanet
    restart: always
    depends_on:
    init: true

  prometheus:
    build:
      context: ./services/prometheus
      dockerfile: Dockerfile
      args:
    
    container_name: prometheus
    environment:
    volumes:
      - prometheus_cert:/etc/ssl/certs/prometheus.crt:ro
      - grafana_cert:/etc/ssl/certs/grafana.crt:ro
    secrets:
      - source: prometheus_key
        target: /etc/ssl/private/prometheus.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "9090:9090"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  grafana:
    build:
      context: ./services/grafana
      dockerfile: Dockerfile
      args:
    
    container_name: grafana
    environment:
    volumes:
      - grafana_cert:/etc/ssl/certs/grafana.crt:ro
    secrets:
      - source: grafana_key
        target: /etc/ssl/private/grafana.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "3000:3000"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  logstash:
    build:
      context: ./services/logstash
      dockerfile: Dockerfile
      args:
    
    container_name: logstash
    environment:
    volumes:
      - logstash_cert:/etc/ssl/certs/logstash.crt:ro
      - elasticsearch_cert:/etc/ssl/certs/elasticsearch.crt:ro
    secrets:
      - source: logstash_key
        target: /etc/ssl/private/logstash.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  elasticsearch:
    build:
      context: ./services/elasticsearch
      dockerfile: Dockerfile
      args:
    
    container_name: elasticsearch
    environment:
    volumes:
      - elasticsearch_cert:/etc/ssl/certs/elasticsearch.crt:ro
      - kibana_cert:/etc/ssl/certs/kibana.crt:ro
    secrets:
      - source: elasticsearch_key
        target: /etc/ssl/private/elasticsearch.key
        uid: #TODO uid
        mode: 0400
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  kibana:
    build:
      context: ./services/kibana
      dockerfile: Dockerfile
      args:
    
    container_name: kibana
    environment:
    volumes:
      - kibana_cert:/etc/ssl/certs/kibana.crt:ro
    secrets:
      - source: kibana_key
        target: /etc/ssl/private/kibana.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "5601:5601"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true

#TODO add certs
volumes:
  nginx-cert:
  api_gateway_cert:
  user_cert:
  match_cert:
  tournament_cert:
  keycloak_cert:
  matchmaking_cert:
  game-state_cert:
  ai_cert:
  query_cert:
  postgresql_cert:
  blockchain_cert:
  redis-core_cert:
  geth_cert:
  prometheus_cert:
  grafana_cert:
  logstash_cert:
  elasticsearch_cert:
  kibana_cert:

secrets:
  nginx-key:        #real
  api_gateway_key:  #self-signed
  user_key:         #self-signed
  match_key:        #self-signed
  tournament_key:   #self-signed
  keycloak_key:     #self-signed
  matchmaking_key:  #self-signed
  game-state_key:   #self-signed
  ai_key:           #self-signed
  query_key:        #self-signed
  postgresql_key:   #self-signed
  blockchain_key:   #self-signed
  redis-core_key:   #self-signed
  geth_key:         #self-signed
  prometheus_key:   #self-signed
  grafana_key:      #self-signed
  logstash_key:     #self-signed
  elasticsearch_key: #self-signed
  kibana_key:       #self-signed

networks:
  edgenet:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/30
  corenet:
    internal: true
  datanet:
    internal: true
  monitoringnet:
    internal: true
