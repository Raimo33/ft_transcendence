services:

  api_gateway:
    build:
      context: ./services/api_gateway
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      args:
    container_name: api_gateway
    environment:
      - RACK_ENV=production
    volumes:
      - jwt_public_key:/etc/ssl/public/jwt.pub:ro
    secrets:
    ports:
      - "3000:3000"
    networks:
      - core
    restart: always
    depends_on:
      nginx:
        condition: service_healthy
    init: true

  auth:
    build:
      context: ./services/auth
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      args:
    
    container_name: auth
    environment:
    volumes:
    secrets:
      - source: jwt_private_key
        target: ./etc/ssl/private/jwt.key
        uid: #TODO uid
        mode: 0400
    ports:
      -
    networks:
      - core
    restart: always
    depends_on:
    init: true
  
  elasticsearch:
    build:
      context: ./services/elasticsearch
      dockerfile: Dockerfile
      args:
    
    container_name: elasticsearch
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - monitoring
    restart: always
    depends_on:
    init: true

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      args:
    volumes:
      - frontend_data:/var/www/html
  
  game_state:
    build:
      context: ./services/game_state
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      args:
    
    container_name: game_state
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - core
    restart: always
    depends_on:
    init: true

  logstash:
    build:
      context: ./services/logstash
      dockerfile: Dockerfile
      args:
    
    container_name: logstash
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - monitoring
    restart: always
    depends_on:
    init: true
  
  match:
    build:
      context: ./services/match
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      args:
    
    container_name: match
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - core
    restart: always
    depends_on:
    init: true

  matchmaking:
    build:
      context: ./services/matchmaking
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      args:
    
    container_name: matchmaking
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - core
    restart: always
    depends_on:
    init: true
  
  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
      args:
    
    container_name: nginx
    environment:
    volumes:
      - nginx_cert:/etc/ssl/public/nginx.crt:ro
    secrets:
      - source: nginx_key
        target: /etc/ssl/private/nginx.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "80:80"
      - "443:443"
    networks:
      - edge
    restart: always
    depends_on:
    init: true

  postgresql:
    build:
      context: ./services/postgresql
      dockerfile: Dockerfile
      args:
    container_name: postgresql
    environment:
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    secrets:
    ports:
      - "5432:5432"
    networks:
      - data
    restart: always
    depends_on:
    init: true

  memcached:
    build:
      context: ./services/memcached
      dockerfile: Dockerfile
      args:
    
    container_name: memcached
    environment:
    volumes:
    secrets:
    ports:
      - "11211:11211"
    networks:
      - data
    restart: always
    depends_on:
    init: true
  
  kibana:
    build:
      context: ./services/kibana
      dockerfile: Dockerfile
      args:
    
    container_name: kibana
    environment:
    volumes:
    secrets:
    ports:
      - "5601:5601"
    networks:
      - monitoring
    restart: always
    depends_on:
    init: true

  tournament:
    build:
      context: ./services/tournament
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      args:
    
    container_name: tournament
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - core
    restart: always
    depends_on:
    init: true

  user:
    build:
      context: ./services/user
      additional_contexts:
        - protos=./protos
      dockerfile: Dockerfile
      args:
    container_name: user
    environment:
    volumes:
    secrets:
    ports:
      - 50051:50051
    networks:
      - core
    restart: always
    depends_on:
    init: true

volumes:
  #TODO non volumi effettivi ma docker volumes
  postgresql_data:
  nginx_cert:

secrets:
  jwt_private_key:
    file: ./secrets/jwt.key
  jwt_public_key:
    file: ./secrets/jwt.pub
  nginx_key:
    file: ./secrets/nginx.key

networks:
  edge:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/30
  core:
    internal: true
  data:
    internal: true
  monitoring:
    internal: true
