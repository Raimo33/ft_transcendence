services:

  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
      args:
    
    container_name: nginx
    environment:
    volumes:
      - nginx_cert:/etc/ssl/certs/nginx.crt:ro
    secrets:
      - source: nginx_key
        target: /etc/ssl/private/nginx.key
        uid: #TODO uid
        mode: 0400
    ports:
      - "80:80"
      - "443:443"
    networks:
      - edgenet
    restart: always
    depends_on:
    init: true

  api_gateway:
    build:
      context: ./services/api_gateway
      dockerfile: Dockerfile
      args:
    container_name: api_gateway
    environment:
    volumes:
      - ./services/api_gateway/shared/:/shared/:ro
    secrets:
    ports:
      - "3000:3000"
    networks:
      - edgenet
    restart: always
    depends_on:
      nginx:
        condition: service_healthy
    init: true
  
  user:
    build:
      context: ./services/user
      dockerfile: Dockerfile
      args:
    
    container_name: user
    environment:
    volumes:
    secrets:
    ports:
      - 50052:50052
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  match:
    build:
      context: ./services/match
      dockerfile: Dockerfile
      args:
    
    container_name: match
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  tournament:
    build:
      context: ./services/tournament
      dockerfile: Dockerfile
      args:
    
    container_name: tournament
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
      args:
    
    container_name: auth
    environment:
    volumes:
    secrets:
    ports:
      -
    networks:
      - corenet
    restart: always
    depends_on:
    init: true

  matchmaking:
    build:
      context: ./services/matchmaking
      dockerfile: Dockerfile
      args:
    
    container_name: matchmaking
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  game_state:
    build:
      context: ./services/game_state
      dockerfile: Dockerfile
      args:
    
    container_name: game_state
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - corenet
    restart: always
    depends_on:
    init: true
  
  db_gateway:
    build:
      context: ./services/db_gateway
      dockerfile: Dockerfile
      args:
    
    container_name: db_gateway
    environment:
    volumes:
    secrets:
    ports:
      - 50052:50052
    networks:
      - datanet
    restart: always
    depends_on:
      postgresql:
        condition: service_healthy
    init: true

  postgresql:
    build:
      context: ./services/postgresql
      dockerfile: Dockerfile
      args:

    container_name: postgresql
    environment:
      - DB_NAME=${DB_NAME}
    volumes:
    secrets:
    ports:
      - "5432:5432"
    networks:
      - datanet
    restart: always
    depends_on:
    init: true
  
  logstash:
    build:
      context: ./services/logstash
      dockerfile: Dockerfile
      args:
    
    container_name: logstash
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  elasticsearch:
    build:
      context: ./services/elasticsearch
      dockerfile: Dockerfile
      args:
    
    container_name: elasticsearch
    environment:
    volumes:
    secrets:
    ports:
      - 
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true
  
  kibana:
    build:
      context: ./services/kibana
      dockerfile: Dockerfile
      args:
    
    container_name: kibana
    environment:
    volumes:
    secrets:
    ports:
      - "5601:5601"
    networks:
      - monitoringnet
    restart: always
    depends_on:
    init: true

volumes:
  nginx_cert:

secrets:

networks:
  edgenet:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/30
  corenet:
    internal: true
  datanet:
    internal: true
  monitoringnet:
    internal: true
