# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    API_swagger.yaml                                   :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: craimond <bomboclat@bidol.juis>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/10/05 19:23:58 by craimond          #+#    #+#              #
#    Updated: 2024/10/22 22:29:08 by craimond         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

openapi: 3.1.0
info:
  title: Pongfumasters API
  description: REST-ful API to interact with the Pongfumasters gateway.
  version: 1.0.0
servers:
  - url: /api/v1
    description: Main API server
security:
  - jwtAuth: []
paths:
  /users:
    post:
      summary: User registration
      description: Register a new user in the system by providing email, password, display name, and other optional fields.
      parameters:
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
        required: true
      responses:
        "201":
          description: User registration successful.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_id"
        "409":
          $ref: '#/components/responses/Conflict'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
  /users/{user_id}:
    get:
      summary: Get public and private user data by user_id
      description: Retrieve detailed information of a specific user using their unique user_id.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the Private User object of the specified user.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
    delete:
      summary: Delete a user account
      description: Permanently delete a user account by their user_id.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to delete.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/profile:
    get:
      summary: Get user profile
      description: Retrieve the public profile of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve profile from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the Public User object of the specified user.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "304":
          $ref: '#/components/responses/NotModified'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge' 
    patch:
      summary: Update user profile
      description: Update the public profile of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to update profile for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfile"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/password:
    put:
      summary: Update user password
      description: Update the password of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to update password for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPassword"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/password/recovery:
    post:
      summary: Generate password recovery token
      description: Generate and send a password recovery token to the user via email.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to recover password for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_email"
        required: true
      responses:
          "204":
            $ref: '#/components/responses/NoContent'
          "401":
            $ref: '#/components/responses/Unauthorized'
          "403":
            $ref: '#/components/responses/Forbidden'
          "411":
            $ref: '#/components/responses/LengthRequired'
          "413":
            $ref: '#/components/responses/ContentTooLarge'
          "431":
            $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/password/recovery/{token}:
    post:
      summary: Verify password recovery token
      description: Verify the password recovery token provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify password recovery token for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: token
          in: path
          description: Password recovery token provided by the user.
          schema:
            type: string
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_psw"
        required: true
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/email:
    get:
      summary: Get user email
      description: Retrieve the email address of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve email from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the email address of the specified user.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    put:
      summary: Update user email
      description: Update the email address of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to update email for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_email"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/email/verification:
    post:
      summary: Verify email address
      description: Verify the email address of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify email for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/email/verify/{token}:
    post:
      summary: Verify email verification token
      description: Verify the email verification token provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify email verification token for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: token
          in: path
          description: Email verification token provided by the user.
          schema:
            type: string
          required: true
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/2fa:
    post:
      summary: Setup two-factor authentication
      description: Enable two-factor authentication for a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to enable 2fa.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Two-factor authentication successfully enabled.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/totp_secret"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    get:
      summary: Get two-factor authentication status
      description: Retrieve the two-factor authentication status of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve 2fa status from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the 2fa status of the specified user.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/two_factor_auth_status"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    delete:
      summary: Disable two-factor authentication
      description: Disable two-factor authentication for a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to disable 2fa.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/2fa/verify:
    post:
      summary: Verify two-factor authentication code
      description: Verify the two-factor authentication code provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify 2fa code for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/2fa/recovery:
    post:
      summary: Generate 2fa recovery token
      description: Generate and send 2fa recovery token to the user via email.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to recover 2fa for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_email"
        required: true
      security:
        - jwtAuth: []
      responses:
          "204":
            $ref: '#/components/responses/NoContent'
          "401":
            $ref: '#/components/responses/Unauthorized'
          "403":
            $ref: '#/components/responses/Forbidden'
          "411":
            $ref: '#/components/responses/LengthRequired'
          "413":
            $ref: '#/components/responses/ContentTooLarge'
          "431":
            $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/2fa/recovery/{token}:
    post:
      summary: Verify 2fa recovery token
      description: Verify the 2fa recovery token provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify 2fa recovery token for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: token
          in: path
          description: 2fa recovery token provided by the user.
          schema:
            type: string
          required: true
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/matches:
    get:
      summary: Get list of user matches.
      description: Returns the list of matches a user has ever played in.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve data from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of matches to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: sorting_options
          in: query
          description: Sort the matches list by age, duration or number of players.
          schema:
            $ref: "#/components/schemas/player_match_sorting_options"
          required: false
        - name: filter_options
          in: query
          description: Filter the matches list by status or leaderboard position.
          schema:
            $ref: "#/components/schemas/player_match_filter_options"
          required: false
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Matches list successfully retrieved.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Match"
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'

  /users/{user_id}/tournaments:
    get:
      summary: Get list of user tournaments.
      description: Returns the list of tournaments a user has ever participated in.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve data from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of tournaments to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: sorting_options
          in: query
          description: Sort the tournaments list by age, duration, or number of players.
          schema:
            $ref: "#/components/schemas/player_tournament_sorting_options"
          required: false
        - name: filter_options
          in: query
          description: Filter the tournaments list by status or mode.
          schema:
            $ref: "#/components/schemas/player_tournament_filter_options"
          required: false
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Tournaments list successfully retrieved.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tournament"
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/friends:
    post:
      summary: Add a friend
      description: Add a user to the friend list.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user adding a friend.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_id"
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    get:
      summary: Get list of friends
      description: Retrieve the list of friends of a specific user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve friends from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of friends to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: sorting_options
          in: query
          description: Sort the users list by display name, registered_timestamp, last active.
          schema:
            $ref: "#/components/schemas/profile_sorting_options"
          required: false
        - name: filter_options
          in: query
          description: Filter the users list by status.
          schema:
            $ref: "#/components/schemas/profile_filter_options"
          required: false
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Friends list successfully retrieved.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user_id"
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":  
          $ref: '#/components/responses/Forbidden'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /users/{user_id}/friends/{friend_id}:
    delete:
      summary: Remove a friend
      description: Remove a user from the friend list.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user removing a friend.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: friend_id
          in: path
          description: Unique identifier of the friend to remove.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
        
  /sessions/{user_id}:
    post:
      summary: User login
      description: Authenticate the user and return a JWT token for session management.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user attempting to log in.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_psw"
        required: true
      responses:
        "200":
          description: User successfully logged in.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/jwt_token"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    get:
      summary: Get user login status
      description: Check if a user is currently logged in and return their status.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to check.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the login status of the user.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    delete:
      summary: User logout
      description: Logs out a specific user from the system.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to log out.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'

  /matches:
    post:
      summary: Start a new match
      description: Initialize a new Pong match by providing the match settings and the opponent user ID.
      parameters:
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/MatchSettings"
                - type: object
                  properties:
                    invited_users:
                      type: array
                      items:
                        $ref: "#/components/schemas/user_id"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          description: Match successfully created.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match_id"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /matches/{match_id}:
    post:
      summary: Join an ongoing match
      description: Allows a user to join an ongoing match by providing the match ID.
      parameters:
        - name: match_id
          in: path
          description: Unique identifier of the match to join.
          schema:
            $ref: "#/components/schemas/match_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    get:
      summary: Get match info
      description: Retrieve details about a specific match using its ID.
      parameters:
        - name: match_id
          in: path
          description: Unique identifier of the match to retrieve information for.
          schema:
            $ref: "#/components/schemas/match_id"
          required: true
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      responses:
        "200":
          description: Returns match information.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    delete:
      summary: Abandon the current match
      description: Exit and terminate the ongoing match.
      parameters:
        - name: match_id
          in: path
          description: Unique identifier of the match to abandon.
          schema:
            $ref: "#/components/schemas/match_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'

  /tournaments:
    post:
      summary: Start a new tournament
      description: Initialize a new Pong tournament by providing a list of users to invite and tournament mode.
      parameters:
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/tournament_mode"
                - type: object
                  properties:
                    invited_users:
                      type: array
                      items:
                        $ref: "#/components/schemas/user_id"
                    required: true
                    additionalProperties: false
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          description: Tournament successfully created.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tournament_id"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "409":
          $ref: '#/components/responses/Conflict'
        "411":
          $ref: '#/components/responses/LengthRequired'
        "413":
          $ref: '#/components/responses/ContentTooLarge'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
  /tournaments/{tournament_id}:
    post:
      summary: Join an ongoing tournament
      description: Allows an invited user to join an ongoing tournament by providing the tournament ID.
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to join.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
        - $ref: '#/components/parameters/Content-Length'
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    get:
      summary: Get tournament info
      description: Retrieve details about a specific tournament using its ID.
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to retrieve information for.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
        - $ref: '#/components/parameters/Cache-Control'
        - $ref: '#/components/parameters/If-None-Match'
      responses:
        "200":
          description: Returns match information.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
        "304":
          $ref: '#/components/responses/NotModified'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "412":
          $ref: '#/components/responses/PreconditionFailed'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    patch:
      summary: Force start a tournament
      description: Force start the tournament (even if not all players have accepted the invitation).
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to start.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'
    delete:
      summary: Abandon the specified tournament
      description: Exit and resign from the ongoing tournament.
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to abandon.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "431":
          $ref: '#/components/responses/RequestHeaderFieldsTooLarge'

components:
  schemas:

    user_id:
      description: Unique identifier for the user (or AI bot) (UUID format or similar).
      type: string
      format: uuid
      examples:
        - value: 550e8400-e29b-41d4-a716-446655440000
    user_psw:
      description: User's password (plain-text) for authentication.
      type: string
      examples:
        - value: "StrongPassword123!"
    user_email:
      description: User's email address, used for login and notifications.
      type: string
      format: email
      examples:
        - value: "example@example.com"
    user_display_name:
      description: Display name of the user, visible to other players during gameplay.
      type: string
      examples:
        - value: "PongMaster123"
    user_avatar:
      description: User's avatar image, used for profile picture, defaults to a generic avatar if not provided.
      oneOf:
        - type: string
          format: uri
          description: URL to the user's avatar image.
        - type: string
          description: Base64-encoded image data for the user's avatar.
      examples:
        - value: "https://example.com/avatar.jpg"
    user_status:
      description: Current status of the user (online or offline).
      type: string
      enum: [online, offline]
      examples:
        - value: "online"
        - value: "offline"

    match_id:
      description: Unique identifier for the match (UUID format or similar).
      type: string
      format: uuid
      examples:
        - value: 550e8400-e29b-41d4-a716-446655440000
    match_status:
      description: Current status of the match.
      type: string
      enum: [ongoing, completed, interrupted]
      examples:
        - value: "ongoing"
        - value: "completed"
        - value: "interrupted"
    match_ball_speed:
      description: Defines the speed of the ball in the match.
      type: integer
      format: int32
      minimum: 1
      maximum: 100
      examples:
        - value: 50
    match_max_duration:
      description: Maximum allowable duration (seconds) for the match.
      type: integer
      format: int32
      minimum: 60
      maximum: 3600
      examples:
        - value: 300
    match_starting_health_points:
      description: Initial health or lives given to each player at the start of the match.
      type: integer
      format: int32
      minimum: 1
      maximum: 100
      examples:
        - value: 3

    player_leaderboard_position:
      description: Position of the player in the leaderboard.
      type: integer
      format: int32
      minimum: 1
      examples:
        - value: 3

    tournament_id:
      description: Unique identifier for the tournament (UUID format or similar).
      type: string
      format: uuid
      examples:
        - value: "550e8400-e29b-41d4-a716-446655440000"
    tournament_mode:
      description: Format of the tournament.
      type: string
      enum: [single_elimination, knockout, king_of_the_hill, ladder, round_robin]
      examples:
        - value: "single_elimination"
        - value: "knockout"
        - value: "king_of_the_hill"
        - value: "ladder"
        - value: "round_robin"
    tournament_status:
      description: Current status of the tournament.
      type: string
      enum: [ongoing, completed, interrupted]
      examples:
        - value: "ongoing"
        - value: "completed"
        - value: "interrupted"
    timestamp:
      description: Timestamp in unix timestamp format.
      type: integer
      format: int64
      examples:
        - value: 1630000000
    
    two_factor_auth_status:
      description: Status of the 2FA authentication for the user.
      type: boolean
      examples:
        - value: true
    
    qr_code:
      description: URL to the QR code image.
      type: string
      format: uri
      examples:
        - value: "https://example.com/qr_code.png"
      
    totp_code:
      description: TOTP code generated by the user for 2FA authentication.
      type: string #string because it can contain leading zeros
      examples:
        - value: "012345"
    
    totp_secret:
      description: TOTP secret key for generating 2FA codes.
      type: string
      examples:
        - value: otpauth://totp/{issuer}:{account}?secret={secret}&issuer={issuer}
    
    totp_key:
      description: Represents a 2FA private key for a user.
      type: object
      properties:
        qr_code:
          $ref: "#/components/schemas/qr_code"
        secret:
          $ref: "#/components/schemas/totp_secret"

    jwt_token:
      description: JWT token for session management.
      type: string
      examples:
        - value: <Header>.<Payload>.<Signature>

    websocket_url:
      description: WebSocket URL for real-time interaction during the match. Used by clients to establish connections and interact with the game in real-time.
      type: string
      format: uri
      examples:
        - value: "wss://example.com/ws"
    
    UserProfile:
      description: Represents a public user profile with limited information.
      type: object
      properties: 
        user_id:
          $ref: "#/components/schemas/user_id"
        display_name:
          $ref: "#/components/schemas/user_display_name"
        avatar:
          $ref: "#/components/schemas/user_avatar"
        status:
          $ref: "#/components/schemas/user_status"
        last_active:
          $ref: "#/components/schemas/timestamp"
        registered_timestamp:
          $ref: "#/components/schemas/timestamp"
      required: [user_id, display_name, avatar, status, last_active, registered_timestamp]

    User:
      description: Represents a private user profile with additional information.
      type: object
      allOf:
        - $ref: "#/components/schemas/UserProfile"
        - properties:
            email:
              $ref: "#/components/schemas/user_email"
            two_factor_auth:
              $ref: "#/components/schemas/two_factor_auth_status"
          additionalProperties: false
      required: [user_id, display_name, avatar, status, last_active, email, two_factor_auth]

    MatchSettings:
      description: Settings and configurations for the match, such as ball speed, match duration, and player health.
      type: object
      properties:
        ball_speed:
          $ref: "#/components/schemas/match_ball_speed"
        max_duration:
          $ref: "#/components/schemas/match_max_duration"
        starting_health:
          $ref: "#/components/schemas/match_starting_health_points"
    
    Match:
      description: Represents a match of Pong between two players.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/match_id"
        websocket_url:
          $ref: "#/components/schemas/websocket_url"
        players:
          description: Array of user_ids representing the players in the match.
          type: array
          intems:
            $ref: "#/components/schemas/user_id"
        status:
          $ref: "#/components/schemas/match_status"
        started_timestamp:
          $ref: "#/components/schemas/timestamp"
        finished_timestamp:
          $ref: "#/components/schemas/timestamp"
        settings:
          $ref: "#/components/schemas/MatchSettings"
        leaderboard:
          description: Array of user_ids in the order of their scores.
          type: array
          items:
            $ref: "#/components/schemas/user_id"
      required: [match_id, players, status, started_timestamp, match_settings]

    Tournament:
      description: Represents a Pong tournament, containing multiple matches and players.
      type: object
      properties:
        tournament_id:
          $ref: "#/components/schemas/tournament_id"
        tournament_mode:
          $ref: "#/components/schemas/tournament_mode"
        matches:
          description: Array of match_ids in the tournament.
          type: array
          items:
            $ref: "#/components/schemas/match_id"
        status:
          $ref: "#/components/schemas/tournament_status"
        started_timestamp:
          $ref: "#/components/schemas/timestamp"
        finished_timestamp:
          $ref: "#/components/schemas/timestamp"
        leaderboard:
          description: Array of user_ids in the order of their scores.
          type: array
          items:
            $ref: "#/components/schemas/user_id"
      required: [tournament_id, tournament_mode, matches, status, started_timestamp]

    profile_sorting_options:
      description: Options to sort the user profiles list.
      type: string
      enum: [display_name, registered_timestamp, last_active]
    profile_filter_options:
      description: Options to filter the user profiles list.
      type: object
      properties:
        key:
          type: string
          enum: [status]
        value:
          oneOf:
            - $ref: "#/components/schemas/user_status"

    player_match_sorting_options:
      description: Options to sort the player's matches list.
      type: string
      enum: [age, duration, number_of_players, leaderboard_position]
    player_match_filter_options:
      description: Options to filter the player's matches list.
      type: object
      properties:
        key:
          type: string
          enum: [status, leaderboard_position]
        value:
          oneOf:
            - $ref: "#/components/schemas/match_status"
            - $ref: "#/components/schemas/player_leaderboard_position"

    player_tournament_sorting_options:
      description: Options to sort the player's tournaments list.
      type: string
      enum: [age, duration, number_of_players, leaderboard_position]
    player_tournament_filter_options:
      description: Options to filter the player's tournaments list.
      type: object
      properties:
        key:
          type: string
          enum: [mode, status, leaderboard_position]
        value:
          oneOf:
            - $ref: "#/components/schemas/tournament_mode"
            - $ref: "#/components/schemas/tournament_status"
            - $ref: "#/components/schemas/player_leaderboard_position"

    UpdateUserProfile:
      type: object
      properties:
        display_name:
          $ref: "#/components/schemas/user_display_name"
        avatar:
          $ref: "#/components/schemas/user_avatar"
      required: []

    UpdateUserPassword:
      type: object
      properties:
        current_password:
          $ref: "#/components/schemas/user_psw"
        new_password:
          $ref: "#/components/schemas/user_psw"
      required: [current_password, new_password]

    RegisterUser:
      type: object
      description: Data for registering a new user.
      properties:
        email:
          $ref: "#/components/schemas/user_email"
        password:
          $ref: "#/components/schemas/user_psw"
        display_name:
          $ref: "#/components/schemas/user_display_name"
      required: [email, password, display_name]

  parameters:
      
    Content-Length:
      name: Content-Length
      in: header
      description: The length of the request body in octets (8-bit bytes).
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 12345
      required: true
    
    If-None-Match:
      name: If-None-Match
      in: header
      description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
      schema:
        type: string
      example: "W/\"67ab43\""
      required: false
    
    Cache-Control:
      name: Cache-Control
      in: header
      description: Cache control directives to influence caching behavior.
      schema:
        type: string
      example: "public, max-age=3600"
      required: false

  headers:

    X-Rate-Limit-Limit:
      description: Maximum number of requests allowed in the current window.
      schema:
        type: integer
        format: int32
        minimum: 1
      example: 100
    X-Rate-Limit-Remaining:
      description: Remaining number of requests allowed in the current window.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 99
    X-Rate-Limit-Reset:
      description: Time in seconds until the rate limit resets.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 60
    X-Rate-Limit-Interval:
      description: Time interval in seconds for the rate limit window.
      schema:
        type: integer
        format: int32
        minimum: 1
      example: 60
    Retry-After:
      description: Time in seconds until the client can retry the request.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 60
    
    ETag:
      description: An identifier for a specific version of a resource.
      schema:
        type: string
      example: "W/\"67ab43\""
    Cache-Control:
      description: Cache control directives for the response.
      schema:
        type: string
      example: "public, max-age=3600"

    Content-Length:
      description: The length of the request body in octets (8-bit bytes).
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 12345

  responses:

    NoContent: #HTTP 204
      description: No content to return. The request was successful but there is no content to return.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    NotModified: #HTTP 304
      description: Not modified. The resource has not changed since the last request.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'

    Unauthorized: #HTTP 401
      description: Unauthorized. JWT token is missing or invalid.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    Forbidden: #HTTP 403
      description: Forbidden. The user does not have permission to perform the action.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'

    Conflict: #HTTP 409
      description: Conflict. The request could not be completed due to a conflict with the current state of the resource.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    LengthRequired: #HTTP 411
      description: Length required. The request did not specify the length of its content, which is required by the requested resource.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
      
    PreconditionFailed: #HTTP 412
      description: Precondition failed. The server does not meet one of the preconditions that the requester put on the request.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    ContentTooLarge: #HTTP 413
      description: Content too large. The request is larger than the server is willing or able to process.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    RequestHeaderFieldsTooLarge: #HTTP 431
      description: Header fields too large. The server is unwilling to process the request because its header fields are too large.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'

    BadRequest:
      description: Bad request. The request was invalid or cannot be served.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    NotFound:
      description: Not found. The requested resource could not be found.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    MethodNotAllowed:
      description: Method not allowed. The request method is known but not supported by the target resource.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'

    RequestTimeout:
      description: Request timeout. Idle time has passed without any data being sent or received.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'

    UriTooLong:
      description: URI too long. The URI provided was too long for the server to process.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    TooManyRequests:
      description: Rate limit exceeded. Too many requests in a given time window.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
        Retry-After:
          $ref: '#/components/headers/Retry-After'
    
    InternalServerError:
      description: Internal server error. The server encountered an unexpected condition that prevented it from fulfilling the request.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    NotImplemented:
      description: Not implemented. The server does not support the method or functionality required to fulfill the request.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    BadGateway:
      description: Bad gateway. The server received an invalid response from an upstream server.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    ServiceUnavailable:
      description: Service unavailable. The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
    
    GatewayTimeout:
      description: Gateway timeout. The server did not receive a timely response from an upstream server it needed to access in order to complete the request.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'

    ImATeaPot:
      description: I'm a teapot. The server is a teapot, not a coffee machine.

  securitySchemes:
    jwtAuth:
      description: JWT used for authorization. Send the token in the `Authorization` header with the format `Bearer {token}`.
      type: http
      scheme: bearer
      bearerFormat: JWT