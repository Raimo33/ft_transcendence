syntax = "proto3";

package users;

service UserService
{
    rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {}
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {}
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {}
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
    rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {}
    rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse) {}
    rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (UpdateUserPasswordResponse) {}
    rpc RecoverUserPassword(RecoverUserPasswordRequest) returns (RecoverUserPasswordResponse) {}
    rpc RecoverUserPasswordWithToken(RecoverUserPasswordWithTokenRequest) returns (RecoverUserPasswordWithTokenResponse) {}
    rpc GetUserEmail(GetUserEmailRequest) returns (GetUserEmailResponse) {}
    rpc UpdateUserEmail(UpdateUserEmailRequest) returns (UpdateUserEmailResponse) {}
    rpc VerifyUserEmail(VerifyUserEmailRequest) returns (VerifyUserEmailResponse) {}
    rpc VerifyUserEmailWithToken(VerifyUserEmailWithTokenRequest) returns (VerifyUserEmailWithTokenResponse) {}
    rpc EnableTwoFactorAuth(EnableTwoFactorAuthRequest) returns (EnableTwoFactorAuthResponse) {}
    rpc GetTwoFactorAuthStatus(GetTwoFactorAuthStatusRequest) returns (GetTwoFactorAuthStatusResponse) {}
    rpc DisableTwoFactorAuth(DisableTwoFactorAuthRequest) returns (DisableTwoFactorAuthResponse) {}
    rpc VerifyTwoFactorAuth(VerifyTwoFactorAuthRequest) returns (VerifyTwoFactorAuthResponse) {}
    rpc RecoverTwoFactorAuth(RecoverTwoFactorAuthRequest) returns (RecoverTwoFactorAuthResponse) {}
    rpc RecoverTwoFactorAuthWithToken(RecoverTwoFactorAuthWithTokenRequest) returns (RecoverTwoFactorAuthWithTokenResponse) {}
    rpc AddFriend(AddFriendRequest) returns (AddFriendResponse) {}
    rpc GetFriends(GetFriendsRequest) returns (GetFriendsResponse) {}
    rpc RemoveFriend(RemoveFriendRequest) returns (RemoveFriendResponse) {}
}

enum UserStatus
{
    ONLINE = 0;
    OFFLINE = 1;
}

message PrivateUser
{
    string      user_id = 1;
    string      display_name = 2;
    string      avatar = 3;
    UserStatus  status = 4;
    uint64      last_active = 5;
    uint64      date_registered = 6;
    string      email = 7;
    bool        two_factor_auth = 8;
}

message PublicUser
{
    string      user_id = 1;
    string      display_name = 2;
    string      avatar = 3;
    UserStatus  status = 4;
    uint64      last_active = 5;
    uint64      date_registered = 6;
}

enum SortingOptions
{
    UNSORTED = 0;
    DISPLAY_NAME = 1;
    EMAIL = 2;
    REGISTERED_TIMESTAMP = 3;
    LAST_ACTIVE_TIMESTAMP = 4;
}

message FilterOptions
{
    optional UserStatus status = 1;
    // Add more filter options here
}

// v1/users POST
message RegisterUserRequest
{
    string          email = 1;
    string          password = 2;
    string          display_name = 3;
    optional string avatar = 4;
}
message RegisterUserResponse
{
    uint16  outcome = 1;
    oneof   content
    {
        string  user_id = 2;
        string  error_message = 3;
    }
}

// v1/users GET
message GetUsersRequest
{
    optional uint32          page = 1;
    optional uint32          results_per_page = 2;
    optional SortingOptions  sort = 3;
    optional FilterOptions   filter = 4;
}
message GetUsersResponse
{
    uint16  outcome = 1;
    oneof   content
    {
        repeated PrivateUser  private_users = 2;
        repeated PublicUser   public_users = 3;
        string error_message = 4;
    }
}

// v1/users/{user_id} GET
message GetUserRequest
{
    string user_id = 1;
}
message GetUserResponse
{
    uint16  outcome = 1;
    oneof   content
    {
        PrivateUser private_user = 2;
        string      error_message = 4;
    }
}

// v1/users/{user_id} DELETE
message DeleteUserRequest
{
    string user_id = 1;
}
message DeleteUserResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/profile GET
message GetUserProfileRequest
{
    string user_id = 1;
}
message GetUserProfileResponse
{
    uint16  outcome = 1;
    oneof   content
    {
        PrivateUser PublicUser = 2;
        string      error_message = 3;
    }
}

// v1/users/{user_id}/profile PATCH
message UpdateUserProfileRequest
{
    string          user_id = 1;
    optional string display_name = 2;
    optional string avatar = 3;
}
message UpdateUserProfileResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/password PUT
message UpdateUserPasswordRequest
{
    string  user_id = 1;
    string  old_password = 2;
    string  new_password = 3;
}
message UpdateUserPasswordResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/password/recovery POST
message RecoverUserPasswordRequest
{
    string  user_id = 1;
    string  email = 2;
}
message RecoverUserPasswordResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/password/recovery/{token} POST
message RecoverUserPasswordWithTokenRequest
{
    string  user_id = 1;
    string  recovery_token = 2;
    string  new_password = 3;
}
message RecoverUserPasswordWithTokenResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/email GET
message GetUserEmailRequest
{
    string user_id = 1;
}
message GetUserEmailResponse
{
    uint16  outcome = 1;
    oneof   content
    {
        string  email = 2;
        string  error_message = 3;
    }
}

// v1/users/{user_id}/email PUT
message UpdateUserEmailRequest
{
    string  user_id = 1;
    string  new_email = 2;
}
message UpdateUserEmailResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/email/verify POST
message VerifyUserEmailRequest
{
    string  user_id = 1;
}
message VerifyUserEmailResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/email/verify/{token} POST
message VerifyUserEmailWithTokenRequest
{
    string  user_id = 1;
    string  verification_token = 2;
}
message VerifyUserEmailWithTokenResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/2fa POST
message EnableTwoFactorAuthRequest
{
    string  user_id = 1;
}
message EnableTwoFactorAuthResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/2fa GET
message GetTwoFactorAuthStatusRequest
{
    string user_id = 1;
}
message GetTwoFactorAuthStatusResponse
{
    uint16  outcome = 1;
    oneof   content
    {
        bool    two_factor_auth_status = 2;
        string  error_message = 3;
    }
}

// v1/users/{user_id}/2fa DELETE
message DisableTwoFactorAuthRequest
{
    string user_id = 1;
}
message DisableTwoFactorAuthResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/2fa/verify POST
message VerifyTwoFactorAuthRequest
{
    string  user_id = 1;
    string  totp_code = 2;
}
message VerifyTwoFactorAuthResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/2fa/recovery POST
message RecoverTwoFactorAuthRequest
{
    string  user_id = 1;
}
message RecoverTwoFactorAuthResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/2fa/recovery/{token} POST
message RecoverTwoFactorAuthWithTokenRequest
{
    string  user_id = 1;
    string  recovery_token = 2;
}
message RecoverTwoFactorAuthWithTokenResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/friends POST
message AddFriendRequest
{
    string  user_id = 1;
    string  friend_id = 2;
}
message AddFriendResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}

// v1/users/{user_id}/friends/ GET
message GetFriendsRequest
{
    string                  user_id = 1;
    optional uint32         page = 2;
    optional uint32         results_per_page = 3;
    optional SortingOptions sort = 4;
    optional FilterOptions  filter = 5;
}
message GetFriendsResponse
{
    uint16  outcome = 1;
    oneof   content
    {
        repeated PrivateUser  private_users = 2;
        repeated PublicUser   public_users = 3;
        string  error_message = 4;
    }
}

// v1/users/{user_id}/friends/{friend_id} DELETE
message RemoveFriendRequest
{
    string  user_id = 1;
    string  friend_id = 2;
}
message RemoveFriendResponse
{
    uint16           outcome = 1;
    optional string  error_message = 2;
}
