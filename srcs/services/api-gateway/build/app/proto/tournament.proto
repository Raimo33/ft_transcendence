syntax = "proto3";

package tournament;


service TournamentService
{
    rpc GetUserTournaments    (GetUserTournamentsRequest)   returns (GetUserTournamentsResponse) {}
    rpc CreateTournament      (CreateTournamentRequest)     returns (CreateTournamentResponse) {}
    rpc JoinTournament        (JoinTournamentRequest)       returns (JoinTournamentResponse) {}
    rpc GetTournament         (GetTournamentRequest)        returns (GetTournamentResponse) {}
    rpc ForceStartTournament  (ForceStartTournamentRet)     returns (ForceStartTournamentRese) {}
    rpc AbandonTournament     (AbandonTournamentRequest)    returns (AbandonTournamentResponse) {}
}

enum tournament_status
{
    ONGOING = 0;
    COMPLETED = 1;
    INTERRUPTED = 2;
}
enum tournament_mode
{
    SINGLE_ELIMINATION = 0;
    KNOCKOUT = 1;
    KING_OF_THE_HILL = 2;
    LADDER = 3;
    ROUND_ROBIN = 4;
}
message tournament
{
    string             id = 1;
    tournament_mode    mode = 2;
    repeated string    match_ids = 3;
    tournament_status  status = 4;
    uint64             started_timestamp = 5;
    optional uint64    finished_timestamp = 6;
}

enum player_tournament_sorting_options
{
    AGE = 0;
    DURATION = 1;
    NUMBER_OF_PLAYERS = 2;
    POSITION = 3;
}

message player_tournament_filters
{
    optional tournament_mode    mode = 1;
    optional tournament_status  status = 2;
    optional uint32             position = 3;
}

// v1/users/{user_id}/tournaments GET
message GetUserTournamentsRequest
{
    string                                     requesting_user_id = 1;
    string                                     user_id = 2;
    optional uint32                            limit = 3;
    optional uint32                            offset = 4;
    optional player_tournament_sorting_options sort_by = 5;
    optional player_tournament_filters         filters = 6;
    optional string                            etag = 7;
}
message GetUserTournamentsResponse
{
    int32                        status_code = 1;
    optional repeated tournament tournaments = 2;
    string                       etag = 3;
}

// v1/tournaments POST
message CreateTournamentRequest
{
    string                    requesting_user_id = 1;
    repeated string           invided_users_ids = 2;
    optional tournament_mode  mode = 3;
}
message CreateTournamentResponse
{
    int32            status_code = 1;
    optional string  tournament_id = 2;
}

// v1/tournaments/{tournament_id} POST
message JoinTournamentRequest
{
    string  requesting_user_id = 1;
    string  tournament_id = 2;
}
message JoinTournamentResponse
{
    int32 status_code = 1;
}

// v1/tournaments/{tournament_id} GET
message GetTournamentRequest
{
    string          requesting_user_id = 1;
    string          tournament_id = 2;
    optional string etag = 3;
}
message GetTournamentResponse
{
    int32               status_code = 1;
    optional tournament tournament = 2;
    string              etag = 3;
}

// v1/tournaments/{tournament_id} PATCH
message ForceStartTournamentRet
{
    string requesting_user_id = 1;
    string tournament_id = 2;
}
message ForceStartTournamentRese
{
    int32 status_code = 1;
}

// v1/tournaments/{tournament_id} DELETE
message AbandonTournamentRequest
{
    string requesting_user_id = 1;
    string tournament_id = 2;
}
message AbandonTournamentResponse
{
    int32  status_code = 1;
}