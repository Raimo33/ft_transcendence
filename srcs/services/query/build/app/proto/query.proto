#TODO raffinare

syntax = "proto3";

package database.v1;

option go_package = "database/v1";

// Query represents a flexible database query
message Query {
  // SQL query text
  string query = 1;
  
  // Named parameters for the query
  map<string, Value> parameters = 2;
  
  // Optional transaction ID if part of a transaction
  string transaction_id = 3;
}

// Value represents any possible parameter value
message Value {
  oneof kind {
    string string_value = 1;
    int64 int_value = 2;
    double float_value = 3;
    bool bool_value = 4;
    bytes bytes_value = 5;
    // For arrays/lists
    repeated Value array_value = 6;
    // For objects/structs
    map<string, Value> object_value = 7;
    // For null values
    bool is_null = 8;
  }
}

// QueryResult represents a flexible query result
message QueryResult {
  // Column definitions
  repeated ColumnDefinition columns = 1;
  
  // Rows of data
  repeated Row rows = 2;
  
  // Number of rows affected (for INSERT/UPDATE/DELETE)
  int64 affected_rows = 3;
  
  // Optional error information
  Error error = 4;
}

message ColumnDefinition {
  string name = 1;
  string type = 2;
}

message Row {
  repeated Value values = 1;
}

message Error {
  int32 code = 1;
  string message = 2;
}

message TransactionRequest {
  oneof action {
    bool begin = 1;
    bool commit = 2;
    bool rollback = 3;
  }
}

message TransactionResponse {
  string transaction_id = 1;
  Error error = 2;
}

// The main database service
service DatabaseService {
  // Execute a single query
  rpc ExecuteQuery(Query) returns (QueryResult) {}
  
  // Stream multiple query results
  rpc StreamQuery(Query) returns (stream QueryResult) {}
  
  // Execute multiple queries in a batch
  rpc ExecuteBatch(stream Query) returns (stream QueryResult) {}
  
  // Manage transactions
  rpc Transaction(TransactionRequest) returns (TransactionResponse) {}
}