CREATE DATABASE pongfumasters WITH
OWNER = --TODO: Add owner name here
ENCODING = 'UTF8'
LC_COLLATE = 'en_US.UTF-8'
LC_CTYPE = 'en_US.UTF-8'
TEMPLATE = template0
CONNECTION LIMIT = -1;

\c ${DB_NAME}

CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE TYPE user_status AS ENUM ('O', 'F'); -- O: online, F: offline

CREATE TABLE User
(
    id                     uuid  NOT NULL DEFAULT gen_random_uuid(),
    email                  text  NOT NULL,
    psw                    text  NOT NULL,
    display_name           varchar(25) NOT NULL,
    avatar                 bytea,
    two_factor_auth        boolean DEFAULT false NOT NULL,
    current_status         user_status DEFAULT 'F' NOT NULL,
    registered_timestamp   timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL,
    last_active_timestamp  timestamptz DEFAULT CURRENT_TIMESTAMP NOT NULL,

    CONSTRAINT pk_usr PRIMARY KEY (id),
    CONSTRAINT unq_usr_email UNIQUE (email),
    CONSTRAINT unq_usr_display_name UNIQUE (display_name),

    CONSTRAINT chk_email CHECK (email ~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'),
    CONSTRAINT chk_avatar CHECK (LENGTH(avatar) <= 5242880),
    CONSTRAINT chk_last_active_timestamp CHECK (last_active_timestamp <= NOW()),
    CONSTRAINT chk_registered_timestamp CHECK (registered_timestamp <= NOW())
);

CREATE INDEX idx_usr_registered_timestamp ON User(registered_timestamp);
CREATE INDEX idx_usr_last_active_timestamp ON User(last_active_timestamp);

CREATE TYPE match_status AS ENUM ('O', 'C', 'I'); -- O: ongoing, C: completed, I: interrupted

CREATE TABLE GameMatch
(
    id                   uuid NOT NULL,
    current_status       match_status DEFAULT 'O' NOT NULL,
    websocket_url        text,
    ball_speed           smallint DEFAULT 50 NOT NULL,
    max_duration         smallint DEFAULT 600 NOT NULL,
    starting_health      smallint DEFAULT 3 NOT NULL,
    started_timestamp    timestamptz DEFAULT CURRENT_TIMESTAMP,
    finished_timestamp   timestamptz DEFAULT CURRENT_TIMESTAMP,
    tournament_id        uuid,

    CONSTRAINT           pk_game_match PRIMARY KEY (id),
    CONSTRAINT           unq_game_match_tournament_id UNIQUE (tournament_id) DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT           unq_game_match_websocket_url UNIQUE (websocket_url) DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT           fk_game_match_game_tournament FOREIGN KEY (tournament_id) REFERENCES GameTournament(id) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED,

    CONSTRAINT           chk_websocket_url CHECK (websocket_url ~ '^wss?://([\\w-]+\\.)+[\\w-]+(:\\d+)?(/[\\w-./?%&=]*)?$'),
    CONSTRAINT           chk_ball_speed CHECK (ball_speed <= 100 AND ball_speed > 0),
    CONSTRAINT           chk_starting_health CHECK (starting_health >= 1 AND starting_health <= 100),
    CONSTRAINT           chk_started_timestamp CHECK (started_timestamp <= NOW()),
    CONSTRAINT           chk_finished_timestamp CHECK (finished_timestamp <= NOW()),
);

CREATE INDEX idx_game_match_started_timestamp ON GameMatch(started_timestamp);
CREATE INDEX idx_game_match_finished_timestamp ON GameMatch(finished_timestamp);
CREATE INDEX idx_game_match_outcome_started_timestamp ON GameMatch(outcome, started_timestamp);
CREATE INDEX idx_game_match_outcome_finished_timestamp ON GameMatch(outcome, finished_timestamp);


CREATE TYPE tournament_play_mode AS ENUM ('single-elimination', 'knockout', 'king_of_the_hill', 'ladder', 'round_robin');
CREATE TYPE tournament_status AS ENUM ('O', 'C', 'I'); -- O: ongoing, C: completed, I: interrupted

CREATE TABLE GameTournament
(
    id                   uuid  NOT NULL,
    play_mode            tournament_play_mode DEFAULT 'single-elimination' NOT NULL,
    current_status       tournament_status DEFAULT 'O' NOT NULL,
    started_timestamp    timestamptz DEFAULT CURRENT_TIMESTAMP,
    finished_timestamp   timestamptz DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT           pk_game_tournament PRIMARY KEY (id),
    CONSTRAINT           chk_started_timestamp CHECK (started_timestamp <= NOW()),
    CONSTRAINT           chk_finished_timestamp CHECK (finished_timestamp <= NOW())
);

CREATE INDEX idx_game_tournament_started_timestamp ON GameTournament(started_timestamp);
CREATE INDEX idx_game_tournament_finished_timestamp ON GameTournament(finished_timestamp);
CREATE INDEX idx_game_tournament_mode_started_timestamp ON GameTournament(play_mode, started_timestamp);
CREATE INDEX idx_game_tournament_mode_finished_timestamp ON GameTournament(play_mode, finished_timestamp);


CREATE TYPE friendship_status AS ENUM ('pending', 'accepted', 'blocked', 'rejected');

CREATE TABLE Friendships
(
    user_id_1           uuid NOT NULL,
    user_id_2           uuid NOT NULL,
    status              friendship_status NOT NULL,

    CONSTRAINT pk_friendships PRIMARY KEY (user_id_1, user_id_2),
    CONSTRAINT fk_friendships_user1 FOREIGN KEY (user_id_1) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_friendships_user2 FOREIGN KEY (user_id_2) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE,

    CONSTRAINT chk_friendships_different_users CHECK (user_id_1 < user_id_2)
);

CREATE INDEX idx_friendships_user1_status ON Friendships(user_id_1, status);
CREATE INDEX idx_friendships_user2_status ON Friendships(user_id_2, status);


CREATE TABLE UserMatches
(
    user_id              uuid  NOT NULL,
    match_id             uuid  NOT NULL,
    position             smallint NOT NULL,

    CONSTRAINT           pk_usermatches PRIMARY KEY (match_id, user_id),
    CONSTRAINT           fk_usermatches_match_id FOREIGN KEY (match_id) REFERENCES GameMatch(id) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT           fk_usermatches_user_id FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED
);

CREATE INDEX idx_usermatches_user_id ON UserMatches(user_id);
CREATE INDEX idx_usermatches_match_id_position ON UserMatches(match_id, position);


CREATE TABLE UserTournaments
(
    user_id              uuid  NOT NULL,
    tournament_id        uuid  NOT NULL,
    position             smallint NOT NULL,

    CONSTRAINT           pk_usertournaments PRIMARY KEY (tournament_id, user_id),
    CONSTRAINT           fk_usertournaments_tournament_id FOREIGN KEY (tournament_id) REFERENCES game_tournament(id) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT           fk_usertournaments_user_id FOREIGN KEY (user_id) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED
);

CREATE INDEX idx_usertournaments_user_id ON UserTournaments(user_id);
CREATE INDEX idx_usertournaments_tournament_id_position ON UserTournaments(tournament_id, position);