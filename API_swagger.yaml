openapi: 3.0.0
info:
  title: Pongfumasters API
  description: REST-ful API to interact with the Pongfumasters gateway.
  version: 1.0.0
servers:
  - url: /api/v1
    description: Main API server
paths:
  /users:
    post:
      summary: User registration
      description: Register a new user in the system by providing email, password, and display name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: Returns the user ID upon successful registration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_id"
        "400":
          description: Bad request due to invalid credentials.
        "409":
          description: Conflict, e.g., user with this email already exists.
    get:
      summary: Get a list of users
      description: Retrieve a paginated list of users.
      parameters:
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: results_per_page
          in: query
          description: Number of users to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: sorting_options
          in: query
          description: Sort the users list by display name, email, date registered, last active.
          schema:
            $ref: "#/components/schemas/user_sorting_options"
        - name: filter_options
          in: query
          description: Filter the users list by status.
          schema:
            $ref: "#/components/schemas/user_filter_options"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence request caching behavior.
          schema:
            type: string
          example: max-age=900, private
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns an array of User objects.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: "private, max-age=900, must-revalidate"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "400": 
          description: Bad request due to invalid query parameters.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
  /users/{user_id}:
    get:
      summary: Get user data by user_id
      description: Retrieve detailed information of a specific user using their unique user_id.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to retrieve.
          schema:
            $ref: "#/components/schemas/user_id"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence request caching behavior.
          schema:
            type: string
          example: no-store
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the User object of the specified user.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: no-store
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
    put:
      summary: Update user credentials
      description: Update the email, password, or display name of a user using their user_id.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to update.
          schema:
            $ref: "#/components/schemas/user_id"
      security:
        - jwtAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: User data updated successfully.
        "400":
          description: Bad request due to invalid credentials.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
    delete:
      summary: Delete a user account
      description: Permanently delete a user account by their user_id.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to delete.
          schema:
            $ref: "#/components/schemas/user_id"
      security:
        - jwtAuth: []
      responses:
        "204":
          description: User account deleted successfully.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
  /user/{user_id}/matches:
    get:
      summary: Get list of user matches.
      description: Returns the list of matches a user has ever played in.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to retrieve data from.
          schema:
            $ref: "#/components/schemas/user_id"
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: results_per_page
          in: query
          description: Number of matches to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: sorting_options
          in: query
          description: Sort the matches list by age or duration.
          schema:
            $ref: "#/components/schemas/match_sorting_options"
        - name: filter_options
          in: query
          description: Filter the matches list by status or outcome.
          schema:
            $ref: "#/components/schemas/match_filter_options"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: max-age=300, public, must-revalidate
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns an array of matches.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: max-age=3600, public, no-cache
          content:
            application/json:
              schema:
                description: Array of matches the user played in.
                type: array
                items:
                  $ref: "#/components/schemas/Match"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "400": 
          description: Bad request due to invalid query parameters.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
  /user/{user_id}/tournaments:
    get:
      summary: Get list of user tournaments.
      description: Returns the list of tournaments a user has ever participated in.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to retrieve data from.
          schema:
            $ref: "#/components/schemas/user_id"
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: results_per_page
          in: query
          description: Number of tournaments to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: sorting_options
          in: query
          description: Sort the tournaments list by age, duration, or number of players.
          schema:
            $ref: "#/components/schemas/tournament_sorting_options"
        - name: filter_options
          in: query
          description: Filter the tournaments list by status or mode.
          schema:
            $ref: "#/components/schemas/tournament_filter_options"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: max-age=300, public, must-revalidate
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns an array of tournaments.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: max-age=3600, public, no-cache
          content:
            application/json:
              schema:
                description: Array of tournaments the user participated in.
                type: array
                items:
                  $ref: "#/components/schemas/Tournament"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "400": 
          description: Bad request due to invalid query parameters.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
  /user/{user_id}/friends:
    post:
      summary: Add a friend
      description: Add a user to the friend list.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user adding a friend.
          schema:
            $ref: "#/components/schemas/user_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Unique identifier of the friend to add.
              $ref: "#/components/schemas/user_id"
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Friend added successfully.
        "400":
          description: Bad request due to invalid friend_id.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
    get:
      summary: Get list of friends
      description: Retrieve the list of friends of a specific user.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to retrieve friends from.
          schema:
            $ref: "#/components/schemas/user_id"
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: results_per_page
          in: query
          description: Number of friends to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: sorting_options
          in: query
          description: Sort the users list by display name, date registered, last active.
          schema:
            $ref: "#/components/schemas/friends_sorting_options"
        - name: filter_options
          in: query
          description: Filter the users list by status.
          schema:
            $ref: "#/components/schemas/friends_filter_options"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: private, no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns an array of User objects representing the friends.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: private, max-age=3600, no-cache
          content:
            application/json:
              schema:
                description: Array of friends of the user.
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "400":
          description: Bad request due to invalid query parameters.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
  /user/{user_id}/friends/{friend_id}:
    delete:
      summary: Remove a friend
      description: Remove a user from the friend list.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user removing a friend.
          schema:
            $ref: "#/components/schemas/user_id"
        - name: friend_id
          in: path
          required: true
          description: Unique identifier of the friend to remove.
          schema:
            $ref: "#/components/schemas/user_id"
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Friend removed successfully.
        "400":
          description: Bad request due to invalid friend_id.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User or friend not found.

  /sessions:
    get:
      summary: Get login status of all users
      description: Retrieve the login status of all users.
      parameters:
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: results_per_page
          in: query
          description: Number of users to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: sorting_options
          in: query
          description: Sort the users list by display name, email, date registered, last active.
          schema:
            $ref: "#/components/schemas/user_sorting_options"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns a map of user_ids and their respective statuses.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: private, no-cache
          content:
            application/json:
              schema:
                description: a map of user_ids and their respective status.
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/user_status"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "400":
          description: Bad request due to invalid query parameters.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
    delete:
      summary: Disconnect all users
      description: Logs out all users from the system.
      security:
        - jwtAuth: []
      responses:
        "204":
          description: All users successfully logged out.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
  /sessions/{user_id}:
    post:
      summary: User login
      description: Authenticate the user and return a JWT token for session management.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user attempting to log in.
          schema:
            $ref: "#/components/schemas/user_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_psw"
      responses:
        "200":
          description: Returns a JWT token upon successful authentication.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/jwt_token"
        "400":
          description: Bad request due to invalid credentials.
        "404":
          description: User not found.
    get:
      summary: Get user login status
      description: Check if a user is currently logged in and return their status.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to check.
          schema:
            $ref: "#/components/schemas/user_id"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: private, max-age=60, must-revalidate
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the login status of the user.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: private, max-age=3600, no-cache
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_status"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.
    delete:
      summary: User logout
      description: Logs out a specific user from the system.
      parameters:
        - name: user_id
          in: path
          required: true
          description: Unique identifier of the user to log out.
          schema:
            $ref: "#/components/schemas/user_id"
      security:
        - jwtAuth: []
      responses:
        "204":
          description: User successfully logged out.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: User not found.

  /matches:
    post:
      summary: Start a new match
      description: Initialize a new Pong match by providing the match settings.
      security:
        - jwtAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchSettings"
      responses:
        "200":
          description: Returns a Match object, including the WebSocket URL for real-time communication during the game.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "400":
          description: Bad request due to invalid match settings.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "409":
          description: Conflict, e.g., match already in progress.
    delete:
      summary: Interrupt all ongoing matches
      description: Terminate all currently active matches and clear session data.
      security:
        - jwtAuth: []
      responses:
        "204":
          description: All matches interrupted successfully.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
  /matches/{match_id}:
    post:
      summary: Join an ongoing match
      description: Allows a user to join an ongoing match by providing the match ID.
      parameters:
        - name: match_id
          in: path
          required: true
          description: Unique identifier of the match to join.
          schema:
            $ref: "#/components/schemas/match_id"
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successfully joined the match.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: Match not found.
    get:
      summary: Get match info
      description: Retrieve details about a specific match using its ID.
      parameters:
        - name: match_id
          in: path
          required: true
          description: Unique identifier of the match to retrieve information for.
          schema:
            $ref: "#/components/schemas/match_id"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Returns match information.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              #response cache-control depends if the match is ongoing or completed (ongoing: no-cache, public. completed: max-age=31536000, public)
              example: max-age=31536000, public
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: Match not found.
    delete:
      summary: Abandon the current match
      description: Exit and terminate the ongoing match.
      parameters:
        - name: match_id
          in: path
          required: true
          description: Unique identifier of the match to abandon.
          schema:
            $ref: "#/components/schemas/match_id"
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Match abandoned successfully.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: Match not found.

  /tournaments:
    post:
      summary: Start a new tournament
      description: Initialize a new Pong tournament by providing a list of users to invite and tournament mode.
      security:
        - jwtAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Array of users to invite and mode of the new tournament.
              type: object
              properties:
                players:
                  description: Array of users to invite.
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
                tournament_mode:
                  $ref: "#/components/schemas/tournament_mode"
      responses:
        "200":
          description: Returns a Tournament object, including details of each match.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
        "400":
          description: Bad request due to invalid invited user.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "409":
          description: Conflict, e.g., too many tournaments in progress.
    delete:
      summary: Interrupt all ongoing tournaments
      description: Terminate all currently active tournaments and clear session data.
      security:
        - jwtAuth: []
      responses:
        "204":
          description: All tournaments interrupted successfully.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
  /tournaments/{tournament_id}:
    post:
      summary: Join an ongoing tournament
      description: Allows an invited user to join an ongoing tournament by providing the tournament ID.
      parameters:
        - name: tournament_id
          in: path
          required: true
          description: Unique identifier of the tournament to join.
          schema:
            $ref: "#/components/schemas/tournament_id"
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Successfully joined the tournament.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: Tournament not found.
    get:
      summary: Get tournament info
      description: Retrieve details about a specific tournament using its ID.
      parameters:
        - name: tournament_id
          in: path
          required: true
          description: Unique identifier of the tournament to retrieve information for.
          schema:
            $ref: "#/components/schemas/tournament_id"
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Returns match information.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              #response cache-control depends if the tournament is ongoing or completed (ongoing: no-cache, public. completed: max-age=31536000, public)
              example: max-age=31536000, no-cache, public
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: Tournament not found.
    put:
      summary: Force start a tournament
      description: Force start the tournament (even if not all players have accepted the invitation).
      parameters:
        - name: tournament_id
          in: path
          required: true
          description: Unique identifier of the tournament to start.
          schema:
            $ref: "#/components/schemas/tournament_id"
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Tournament started successfully.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: Tournament not found.
        "409":
          description: Conflict, e.g., tournament already started.
    delete:
      summary: Abandon the specified tournament
      description: Exit and resign from the ongoing tournament.
      parameters:
        - name: tournament_id
          in: path
          required: true
          description: Unique identifier of the tournament to abandon.
          schema:
            $ref: "#/components/schemas/tournament_id"
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Tournament abandoned successfully.
        "401":
          description: Unauthorized access, JWT token is missing or invalid.
        "404":
          description: Tournament not found.

components:
  schemas:

    user_id:
      description: Unique identifier for the user (or AI bot) (UUID format or similar).
      type: string
    user_psw:
      description: User's password (plain-text) for authentication.
      type: string
    user_email:
      description: User's email address, used for login and notifications.
      type: string
    user_display_name:
      description: Display name of the user, visible to other players during gameplay.
      type: string
    user_status:
      description: Current status of the user (online or offline).
      type: string
      enum: [online, offline]
      example: online
    jwt_token:
      description: JWT token for session management.
      type: string
    websocket_url:
      description: WebSocket URL for real-time interaction during the match. Used by clients to establish connections and interact with the game in real-time.
      type: string
    match_id:
      description: Unique identifier for the match (UUID format or similar).
      type: string
    match_status:
      description: Current status of the match.
      type: string
      enum: [ongoing, completed, interrupted]
    match_ball_speed:
      description: Defines the speed of the ball in the match.
      type: integer
      format: int32
      minimum: 1
      maximum: 100
    match_max_duration:
      description: Maximum allowable duration (seconds) for the match.
      type: integer
      format: int32
      minimum: 60
      maximum: 3600
    match_starting_health_points:
      description: Initial health or lives given to each player at the start of the match.
      type: integer
      format: int32
      minimum: 1
      maximum: 100
    match_outcome:
      description: Outcome of the match (win, loss, draw).
      type: string
      enum: [win, loss, draw]
    player_health_points:
      description: Current health points of the player.
      type: integer
      format: int32
      minimum: 0
      maximum: 100
    tournament_id:
      description: Unique identifier for the tournament (UUID format or similar).
      type: string
    tournament_mode:
      description: Format of the tournament.
      type: string
      enum: [knockout, king_of_the_hill, ladder, round_robin]
    tournament_status:
      description: Current status of the tournament.
      type: string
      enum: [ongoing, completed, interrupted]
    date:
      description: Date and time in unix timestamp format.
      type: integer
      format: int64

    UserCredentials:
      type: object
      description: Represents the credentials used for user registration or login.
      properties:
        email:
          $ref: "#/components/schemas/user_email"
        psw:
          $ref: "#/components/schemas/user_psw"
        display_name:
          $ref: "#/components/schemas/user_display_name"

    User:
      type: object
      description: Represents a user (or an AI bot) in the Pongmasters system.
      properties:
        user_id:
          $ref: "#/components/schemas/user_id"
        email:
          $ref: "#/components/schemas/user_email"      
        display_name:
          $ref: "#/components/schemas/user_display_name"
        status:
          $ref: "#/components/schemas/user_status"
      required:
        - user_id

    MatchSettings:
      type: object
      description: Settings and configurations for the match, such as ball speed, match duration, and player health.
      properties:
        ball_speed:
          $ref: "#/components/schemas/match_ball_speed"
        max_duration:
          $ref: "#/components/schemas/match_max_duration"
        starting_health:
          $ref: "#/components/schemas/match_starting_health"

    Match:
      type: object
      description: Represents a Pong match, including players information, settings, and WebSocket connection details.
      properties:
        match_id:
          $ref: "#/components/schemas/match_id"
        websocket_url:
          $ref: "#/components/schemas/websocket_url"
        players:
          type: array
          description: Array of the players in the match.
          items:
            $ref: "#/components/schemas/User"
        healths:
          type: object
          description: A map of user IDs to their respective health points in the match.
          additionalProperties:
            $ref: "#/components/schemas/player_health_points"
        status:
          $ref: "#/components/schemas/match_status"
        date_started:
          $ref: "#/components/schemas/date"
        date_finished:
          $ref: "#/components/schemas/date"
        match_settings:
          $ref: "#/components/schemas/MatchSettings"
      required:
        - match_id

    Tournament:
      type: object
      description: Represents a Pong tournament, including matches information and mode.
      properties:
        tournament_id:
          $ref: "#/components/schemas/tournament_id"
        tournament_mode:
          $ref: "#/components/schemas/tournament_mode"
        matches:
          type: array
          description: Array of all the tournament matches.
          items:
            $ref: "#/components/schemas/Match"
        status:
          $ref: "#/components/schemas/tournament_status"
        date_started:
          $ref: "#/components/schemas/date"
        date_finished:
          $ref: "#/components/schemas/date"
      required:
        - tournament_id

    user_sorting_options:
      description: Options to sort the users list.
      type: string
      enum: [display_name, email, date_registered, last_active]
      example: display_name

    user_filter_options:
      description: Options to filter the users list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/user_status"

    friends_sorting_options:
      description: Options to sort the friends list.
      type: string
      enum: [display_name, date_registered, last_active]
      example: display_name

    friends_filter_options:
      description: Options to filter the friends list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/user_status"

    match_sorting_options:
      description: Options to sort the matches list.
      type: string
      enum: [age, duration]
      example: age

    match_filter_options:
      description: Options to filter the matches list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/match_status"
        outcome:
          $ref: "#/components/schemas/match_outcome"

    tournament_sorting_options:
      description: Options to sort the tournaments list.
      type: string
      enum: [age, duration, number_of_players]
      example: start_date
    
    tournament_filter_options:
      description: Options to filter the tournaments list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/tournament_status"
        mode:
          $ref: "#/components/schemas/tournament_mode"

  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT used for authorization. Send the token in the `Authorization` header with the format `Bearer {token}`.

security:
  - jwtAuth: []