# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    API_swagger.yaml                                   :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: craimond <bomboclat@bidol.juis>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/10/05 19:23:58 by craimond          #+#    #+#              #
#    Updated: 2024/10/15 18:07:06 by craimond         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

openapi: 3.1.0
info:
  title: Pongfumasters API
  description: REST-ful API to interact with the Pongfumasters gateway.
  version: 1.0.0
servers:
  - url: /api/v1
    description: Main API server
paths:
  /users:
    post:
      summary: User registration
      description: Register a new user in the system by providing email, password, display name, and other optional fields.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
        required: true
      responses:
        "202":
          description: The registration request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        registrationCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: Registration completion callback
              description: Server calls this endpoint when the user registration is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                            properties:
                              additional_property:
                                $ref: "#/components/schemas/user_id"
                            additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the registration result.
    get:
      summary: Get a list of users
      description: Retrieve a paginated list of users.
      parameters:
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of users to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: sorting_options
          in: query
          description: Sort the users list by display name, email, registered_timestamp, last active.
          schema:
            $ref: "#/components/schemas/user_sorting_options"
          required: false
        - name: filter_options
          in: query
          description: Filter the users list by status.
          schema:
            $ref: "#/components/schemas/user_filter_options"
          required: false
        - name: Cache-Control
          in: header
          description: Cache control directives to influence request caching behavior.
          schema:
            type: string
          example: max-age=900, private
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: [admin]
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "400": 
          description: Bad request due to invalid query parameters.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        usersListReady:
          "{$request.body.callbackUrl}":
            post:
              summary: Users list ready callback
              description: Server calls this endpoint when the users list is ready to be retrieved.
              parameters:
                - name: ETag
                  in: header
                  description: ETag header value representing the version of the data.
                  schema:
                    type: string
                  example: W/"123456789"
                  required: true
                - name: Cache-Control
                  in: header
                  description: Cache control directives for the response.
                  schema:
                    type: string
                  example: private, max-age=900
                  required: true
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                            properties:
                              additional_property:
                                type: array
                                items:
                                  $ref: "#/components/schemas/PrivateUser"
                            additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the users list.
  /users/{user_id}:
    get:
      summary: Get public and private user data by user_id
      description: Retrieve detailed information of a specific user using their unique user_id.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: Cache-Control
          in: header
          description: Cache control directives to influence request caching behavior.
          schema:
            type: string
          example: no-store
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the Private User object of the specified user.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: no-store
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateUser"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: User not found.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: Delete a user account
      description: Permanently delete a user account by their user_id.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to delete.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The deletion request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        userDeletionCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: User deletion completion callback
              description: Server calls this endpoint when the user deletion is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the user deletion result.
  /users/{user_id}/profile:
    get:
      summary: Get user profile
      description: Retrieve the public profile of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve profile from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: Cache-Control
          in: header
          description: Cache control directives to influence request caching behavior.
          schema:
            type: string
          example: max-age=3600, public
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the Public User object of the specified user.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: max-age=3600, public
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicUser"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: User not found.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    patch:
      summary: Update user profile
      description: Update the public profile of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to update profile for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfile"
        required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        userProfileUpdateCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: User profile update completion callback
              description: Server calls this endpoint when the user profile update is complete or failed.
              parameters:
                - name: ETag
                  in: header
                  description: ETag header value representing the version of the data.
                  schema:
                    type: string
                  example: W/"123456789"
                  required: true
                - name: Cache-Control
                  in: header
                  description: Cache control directives for the response.
                  schema:
                    type: string
                  example: private, max-age=900, must-revalidate
                  required: true
              requestBody:                
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the user profile update result.
  /users/{user_id}/password:
    put:
      summary: Update user password
      description: Update the password of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to update password for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPassword"
        required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        passwordUpdateCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: Password update completion callback
              description: Server calls this endpoint when the password update is complete or failed.
              requestBody:
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: "#/components/schemas/async_call_failure"
                                - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the password update result.
  /users/{user_id}/password/recovery:
    post:
      summary: Generate password recovery token
      description: Generate and send a password recovery token to the user via email.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to recover password for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_email"
        required: true
      responses:
          "202":
            description: The request has been accepted and is being processed asynchronously.
            headers:
              X-Rate-Limit-Limit:
                $ref: '#/components/headers/X-Rate-Limit-Limit'
              X-Rate-Limit-Remaining:
                $ref: '#/components/headers/X-Rate-Limit-Remaining'
              X-Rate-Limit-Reset:
                $ref: '#/components/headers/X-Rate-Limit-Reset'
              X-Rate-Limit-Interval:
                $ref: '#/components/headers/X-Rate-Limit-Interval'
          "429":
            $ref: '#/components/responses/TooManyRequests'
      callbacks:
        passwordRecoveryCompleted:
         "{$request.body.callbackUrl}":
            post:
              summary: Password recovery token generation completion callback
              description: Server calls this endpoint when the password recovery token generation is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the password recovery token via email.
  /users/{user_id}/password/recovery/{token}:
    post:
      summary: Verify password recovery token
      description: Verify the password recovery token provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify password recovery token for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: token
          in: path
          description: Password recovery token provided by the user.
          schema:
            type: string
          required: true
        - name: new_password
          in: query
          description: New password to set for the user account.
          schema:
            $ref: "#/components/schemas/user_psw"
          required: true
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        passwordRecoveryCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: Password recovery completion callback
              description: Server calls this endpoint when the password recovery is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the password recovery result.
  /users/{user_id}/email:
    get:
      summary: Get user email
      description: Retrieve the email address of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve email from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: Cache-Control
          in: header
          description: Cache control directives to influence request caching behavior.
          schema:
            type: string
          example: max-age=3600, private
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the email address of the specified user.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: max-age=3600, private
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_email"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: User not found.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    put:
      summary: Update user email
      description: Update the email address of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to update email for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_email"
        required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        emailUpdateCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: Email update completion callback
              description: Server calls this endpoint when the email update is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the email update result.
  /users/{user_id}/email/verification:
    post:
      summary: Verify email address
      description: Verify the email address of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify email for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        emailVerificationCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: Email verification request completion callback
              description: Server calls this endpoint when the confirmation email is sent or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the email verification request result.
  /users/{user_id}/email/verify/{token}:
    post:
      summary: Verify email verification token
      description: Verify the email verification token provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify email verification token for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: token
          in: path
          description: Email verification token provided by the user.
          schema:
            type: string
          required: true
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        emailVerificationCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: Email verification completion callback
              description: Server calls this endpoint when the email verification is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the email verification result.
  /users/{user_id}/2fa:
    post:
      summary: Setup two-factor authentication
      description: Enable two-factor authentication for a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to enable 2fa.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        2faSetupCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: 2fa setup completion callback
              description: Server calls this endpoint when the 2fa setup is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - $ref: "#/components/schemas/totp_key"
                          additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the 2fa key.
    get:
      summary: Get two-factor authentication status
      description: Retrieve the two-factor authentication status of a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve 2fa status from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the 2fa status of the specified user.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/two_factor_auth_status"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: 2fa not enabled for the user.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: Disable two-factor authentication
      description: Disable two-factor authentication for a user account.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to disable 2fa.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        2faDisableCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: 2fa disable completion callback
              description: Server calls this endpoint when the 2fa disable is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the 2fa disable result.
  /users/{user_id}/2fa/verify:
    post:
    #verrà chiamata subito dopo il post di /users/{user_id}/2fa per verificare il codice otp
      summary: Verify two-factor authentication code
      description: Verify the two-factor authentication code provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify 2fa code for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/totp_code"
        required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        2faVerifyCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: 2fa verification completion callback
              description: Server calls this endpoint when the 2fa verification is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the 2fa verification result.
  /users/{user_id}/2fa/recovery:
    post:
      summary: Generate 2fa recovery token
      description: Generate and send 2fa recovery token to the user via email.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to recover 2fa for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_email"
        required: true
      responses:
          "202":
            description: The request has been accepted and is being processed asynchronously.
            headers:
              X-Rate-Limit-Limit:
                $ref: '#/components/headers/X-Rate-Limit-Limit'
              X-Rate-Limit-Remaining:
                $ref: '#/components/headers/X-Rate-Limit-Remaining'
              X-Rate-Limit-Reset:
                $ref: '#/components/headers/X-Rate-Limit-Reset'
              X-Rate-Limit-Interval:
                $ref: '#/components/headers/X-Rate-Limit-Interval'
          "429":
            $ref: '#/components/responses/TooManyRequests'
      callbacks:
        2faVerifyCompleted:
         "{$request.body.callbackUrl}":
            post:
              summary: 2fa recovery token generation completion callback
              description: Server calls this endpoint when the 2fa recovery token generation is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the 2fa recovery token via email.
  /users/{user_id}/2fa/recovery/{token}:
    post:
      summary: Verify 2fa recovery token
      description: Verify the 2fa recovery token provided by the user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to verify 2fa recovery token for.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: token
          in: path
          description: 2fa recovery token provided by the user.
          schema:
            type: string
          required: true
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        2faRecoveryCompleted:
          "{$request.body.callbackUrl}":
            post:
              summary: 2fa recovery completion callback
              description: Server calls this endpoint when the 2fa recovery is complete or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the 2fa recovery result.
  /users/{user_id}/matches:
    get:
      summary: Get list of user matches.
      description: Returns the list of matches a user has ever played in.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve data from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of matches to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: sorting_options
          in: query
          description: Sort the matches list by age or duration.
          schema:
            $ref: "#/components/schemas/match_sorting_options"
          required: false
        - name: filter_options
          in: query
          description: Filter the matches list by status or leaderboard position.
          schema:
            $ref: "#/components/schemas/user_match_filter_options"
          required: false
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: max-age=300, public, must-revalidate
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "400": 
          description: Bad request due to invalid query parameters.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        matchesListReady:
          "{$request.body.callbackUrl}":
            post:
              summary: Matches list ready callback
              description: Server calls this endpoint when the matches list is ready to be retrieved.
              parameters:
                - name: ETag
                  in: header
                  description: ETag header value representing the version of the data.
                  schema:
                    type: string
                  example: W/"123456789"
                  required: true
                - name: Cache-Control
                  in: header
                  description: Cache control directives for the response.
                  schema:
                    type: string
                  example: public, max-age=3600, no-cache
                  required: true
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                          properties:
                            additional_property:
                              type: array
                              items:
                                $ref: "#/components/schemas/Match"
                                additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the matches list.

  /users/{user_id}/tournaments:
    get:
      summary: Get list of user tournaments.
      description: Returns the list of tournaments a user has ever participated in.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve data from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of tournaments to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: sorting_options
          in: query
          description: Sort the tournaments list by age, duration, or number of players.
          schema:
            $ref: "#/components/schemas/tournament_sorting_options"
          required: false
        - name: filter_options
          in: query
          description: Filter the tournaments list by status or mode.
          schema:
            $ref: "#/components/schemas/user_tournament_filter_options"
          required: false
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: max-age=300, public, must-revalidate
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "400": 
          description: Bad request due to invalid query parameters.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        tournamentsListReady:
          "{$request.body.callbackUrl}":
            post:
              summary: Tournaments list ready callback
              description: Server calls this endpoint when the tournaments list is ready to be retrieved.
              parameters:
                - name: ETag
                  in: header
                  description: ETag header value representing the version of the data.
                  schema:
                    type: string
                  example: W/"123456789"
                  required: true
                - name: Cache-Control
                  in: header
                  description: Cache control directives for the response.
                  schema:
                    type: string
                  example: public, max-age=3600, no-cache
                  required: true
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                          properties:
                            additional_property:
                              type: array
                              items:
                                $ref: "#/components/schemas/Tournament"
                                additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the tournaments list.
  /users/{user_id}/friends:
    post:
      summary: Add a friend
      description: Add a user to the friend list.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user adding a friend.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_id"
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        friendAdded:
          "{$request.body.callbackUrl}":
            post:
              summary: Friend added callback
              description: Server calls this endpoint when the friend has been added successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the friend addition result.
    get:
      summary: Get list of friends
      description: Retrieve the list of friends of a specific user.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to retrieve friends from.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of friends to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: sorting_options
          in: query
          description: Sort the users list by display name, registered_timestamp, last active.
          schema:
            $ref: "#/components/schemas/friends_sorting_options"
          required: false
        - name: filter_options
          in: query
          description: Filter the users list by status.
          schema:
            $ref: "#/components/schemas/friends_filter_options"
          required: false
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: private, no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "400":
          description: Bad request due to invalid query parameters.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        friendsListReady:
          "{$request.body.callbackUrl}":
            post:
              summary: Friends list ready callback
              description: Server calls this endpoint when the friends list is ready to be retrieved.
              parameters:
                - name: ETag
                  in: header
                  description: ETag header value representing the version of the data.
                  schema:
                    type: string
                  example: W/"123456789"
                  required: true
                - name: Cache-Control
                  in: header
                  description: Cache control directives for the response.
                  schema:
                    type: string
                  example: private, max-age=3600, no-cache
                  required: true
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                          properties:
                            additional_property:
                              type: array
                              items:
                                $ref: "#/components/schemas/PublicUser"
                                additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the friends list.
  /users/{user_id}/friends/{friend_id}:
    delete:
      summary: Remove a friend
      description: Remove a user from the friend list.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user removing a friend.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: friend_id
          in: path
          description: Unique identifier of the friend to remove.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        friendRemoved:
          "{$request.body.callbackUrl}":
            post:
              summary: Friend removed callback
              description: Server calls this endpoint when the friend has been removed successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the friend removal result.
  /sessions:
    get:
      summary: Get login status of all users
      description: Retrieve the login status of all users.
      parameters:
        - name: page
          in: query
          description: Page number of the results to retrieve.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: results_per_page
          in: query
          description: Number of users to retrieve per page.
          schema:
            type: integer
            format: int32
            minimum: 1
          required: true
        - name: filter_options
          in: query
          description: Filter the users list by status.
          schema:
            $ref: "#/components/schemas/user_status"
          required: false
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: [admin]
      responses:
        "200":
          description: Returns the login status of all users.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                description: map of user_id to user_status.
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/user_status"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "400":
          description: Bad request due to invalid query parameters.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: Disconnect all users
      description: Logs out all users from the system.
      security:
        - jwtAuth: [admin]
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        allUsersLoggedOut:
          "{$request.body.callbackUrl}":
            post:
              summary: All users logged out callback
              description: Server calls this endpoint when all users have been logged out successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the all users logged out result.
  /sessions/{user_id}:
    post:
      summary: User login
      description: Authenticate the user and return a JWT token for session management.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user attempting to log in.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_psw"
        required: true
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        userLoggedIn:
          "{$request.body.callbackUrl}":
            post:
              summary: User logged in callback
              description: Server calls this endpoint when the user has been logged in successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                          properties:
                            additional_property:
                              $ref: "#/components/schemas/jwt_token"
                              additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the user login result.
    get:
      summary: Get user login status
      description: Check if a user is currently logged in and return their status.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to check.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: private, max-age=60, must-revalidate
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      security:
        - jwtAuth: []
      responses:
        "200":
          description: Returns the login status of the user.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              example: private, max-age=3600, no-cache
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_status"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: User not found.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: User logout
      description: Logs out a specific user from the system.
      parameters:
        - name: user_id
          in: path
          description: Unique identifier of the user to log out.
          schema:
            $ref: "#/components/schemas/user_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        userLoggedOut:
          "{$request.body.callbackUrl}":
            post:
              summary: User logged out callback
              description: Server calls this endpoint when the user has been logged out successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the user logout result.

  /matches:
    post:
      summary: Start a new match
      description: Initialize a new Pong match by providing the match settings and the opponent user ID.
      security:
        - jwtAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/MatchSettings"
                - $ref: "#/components/schemas/user_id"
                  additionalProperties: false
        required: true
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        matchReady:
          "{$request.body.callbackUrl}":
            post:
              summary: Match creation callback
              description: Server calls this endpoint when the match was created successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                            properties:
                              additional_property:
                                $ref: "#/components/schemas/Match"
                                additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the match creation result.
    delete:
      summary: Interrupt all ongoing matches
      description: Terminate all currently active matches and clear session data.
      security:
        - jwtAuth: [admin]
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        allMatchesInterrupted:
          "{$request.body.callbackUrl}":
            post:
              summary: All matches interrupted callback
              description: Server calls this endpoint when all matches have been interrupted successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the all matches interrupted result.
  /matches/{match_id}:
    post:
      summary: Join an ongoing match
      description: Allows a user to join an ongoing match by providing the match ID.
      parameters:
        - name: match_id
          in: path
          description: Unique identifier of the match to join.
          schema:
            $ref: "#/components/schemas/match_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        matchJoined:
          "{$request.body.callbackUrl}":
            post:
              summary: Match joined callback
              description: Server calls this endpoint when the user has joined the match successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                            properties:
                              additional_property:
                                $ref: "#/components/schemas/Match"
                                additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the match joined result.
    get:
      summary: Get match info
      description: Retrieve details about a specific match using its ID.
      parameters:
        - name: match_id
          in: path
          description: Unique identifier of the match to retrieve information for.
          schema:
            $ref: "#/components/schemas/match_id"
          required: true
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Returns match information.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              #response cache-control depends if the match is ongoing or completed (ongoing: no-cache, public. completed: max-age=31536000, public)
              example: max-age=31536000, public
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "304":
          description: Not modified. The resource has not changed since the last request with the given `If-None-Match` value.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Match not found.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    delete:
      summary: Abandon the current match
      description: Exit and terminate the ongoing match.
      parameters:
        - name: match_id
          in: path
          description: Unique identifier of the match to abandon.
          schema:
            $ref: "#/components/schemas/match_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        matchAbandoned:
          "{$request.body.callbackUrl}":
            post:
              summary: Match abandoned callback
              description: Server calls this endpoint when the match has been abandoned successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the match abandoned result.

  /tournaments:
    post:
      summary: Start a new tournament
      description: Initialize a new Pong tournament by providing a list of users to invite and tournament mode.
      security:
        - jwtAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/tournament_mode"
                - type: object
                  properties:
                    invited_users:
                      type: array
                      items:
                        $ref: "#/components/schemas/user_id"
                    required: true
                    additionalProperties: false
        required: true
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        tournamentReady:
          "{$request.body.callbackUrl}":
            post:
              summary: Tournament creation callback
              description: Server calls this endpoint when the tournament was created successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                            properties:
                              additional_property:
                                $ref: "#/components/schemas/Tournament"
                                additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the tournament creation result.
    delete:
      #2 al giorno
      summary: Interrupt all ongoing tournaments
      description: Terminate all currently active tournaments and clear session data.
      security:
        - jwtAuth: [admin]
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        allTournamentsInterrupted:
          "{$request.body.callbackUrl}":
            post:
              summary: All tournaments interrupted callback
              description: Server calls this endpoint when all tournaments have been interrupted successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the all tournaments interrupted result.
  /tournaments/{tournament_id}:
    post:
      summary: Join an ongoing tournament
      description: Allows an invited user to join an ongoing tournament by providing the tournament ID.
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to join.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        tournamentJoined:
          "{$request.body.callbackUrl}":
            post:
              summary: Tournament joined callback
              description: Server calls this endpoint when the user has joined the tournament successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - allOf:
                          - $ref: "#/components/schemas/async_call_success"
                          - type: object
                            properties:
                              additional_property:
                                $ref: "#/components/schemas/Tournament"
                                additionalProperties: false
                required: true
              responses:
                "200":
                  description: Client successfully received the tournament joined result.
    get:
      summary: Get tournament info
      description: Retrieve details about a specific tournament using its ID.
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to retrieve information for.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
        - name: Cache-Control
          in: header
          description: Cache control directives to influence caching behavior.
          schema:
            type: string
          example: no-cache
          required: false
        - name: If-None-Match
          in: header
          description: ETag header for cache validation. The client can provide the ETag value from a previous request to check if the resource has changed.
          schema:
            type: string
          required: false
      responses:
        "200":
          description: Returns match information.
          headers:
            ETag:
              description: The ETag header value representing the version of the data.
              schema:
                type: string
              example: W/"123456789"
            Cache-Control:
              description: Cache control directives for the response.
              schema:
                type: string
              #response cache-control depends if the tournament is ongoing or completed (ongoing: no-cache, public. completed: max-age=31536000, public)
              example: max-age=31536000, no-cache, public
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          description: Tournament not found.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "429":
          $ref: '#/components/responses/TooManyRequests'
    patch:
      summary: Force start a tournament
      description: Force start the tournament (even if not all players have accepted the invitation).
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to start.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "202":
          description: The request has been accepted and is being processed asynchronously.
          headers:
            X-Rate-Limit-Limit:
              $ref: '#/components/headers/X-Rate-Limit-Limit'
            X-Rate-Limit-Remaining:
              $ref: '#/components/headers/X-Rate-Limit-Remaining'
            X-Rate-Limit-Reset:
              $ref: '#/components/headers/X-Rate-Limit-Reset'
            X-Rate-Limit-Interval:
              $ref: '#/components/headers/X-Rate-Limit-Interval'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        tournamentStarted:
          "{$request.body.callbackUrl}":
            post:
              summary: Tournament started callback
              description: Server calls this endpoint when the tournament has been started successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the tournament started result.
    delete:
      summary: Abandon the specified tournament
      description: Exit and resign from the ongoing tournament.
      parameters:
        - name: tournament_id
          in: path
          description: Unique identifier of the tournament to abandon.
          schema:
            $ref: "#/components/schemas/tournament_id"
          required: true
      security:
        - jwtAuth: []
      responses:
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
      callbacks:
        tournamentAbandoned:
          "{$request.body.callbackUrl}":
            post:
              summary: Tournament abandoned callback
              description: Server calls this endpoint when the tournament has been abandoned successfully or failed.
              requestBody:
                content:
                  application/json:
                    schema:
                      oneOf:
                        - $ref: "#/components/schemas/async_call_failure"
                        - $ref: "#/components/schemas/async_call_success"
                required: true
              responses:
                "200":
                  description: Client successfully received the tournament abandoned result.

components:
  schemas:

    # ===================
    # = General Objects =
    # ===================

    user_id:
      description: Unique identifier for the user (or AI bot) (UUID format or similar).
      type: string
      format: uuid
      examples:
        - value: 550e8400-e29b-41d4-a716-446655440000
    user_psw:
      description: User's password (plain-text) for authentication.
      type: string
      examples:
        - value: "StrongPassword123!"
    user_email:
      description: User's email address, used for login and notifications.
      type: string
      format: email
      examples:
        - value: "example@example.com"
    user_display_name:
      description: Display name of the user, visible to other players during gameplay.
      type: string
      examples:
        - value: "PongMaster123"
    user_avatar:
      description: User's avatar image, used for profile picture, defaults to a generic avatar if not provided.
      oneOf:
        - type: string
          format: uri
          description: URL to the user's avatar image.
        - type: string
          description: Base64-encoded image data for the user's avatar.
      examples:
        - value: "https://example.com/avatar.jpg"
    user_status:
      description: Current status of the user (online or offline).
      type: string
      enum: [online, offline]
      examples:
        - value: "online"
        - value: "offline"
  
    jwt_token:
      description: JWT token for session management.
      type: string
      examples:
        - value: <Header>.<Payload>.<Signature>

    websocket_url:
      description: WebSocket URL for real-time interaction during the match. Used by clients to establish connections and interact with the game in real-time.
      type: string
      format: uri
      examples:
        - value: "wss://example.com/ws"

    match_id:
      description: Unique identifier for the match (UUID format or similar).
      type: string
      format: uuid
      examples:
        - value: 550e8400-e29b-41d4-a716-446655440000
    match_status:
      description: Current status of the match.
      type: string
      enum: [ongoing, completed, interrupted]
      examples:
        - value: "ongoing"
        - value: "completed"
        - value: "interrupted"
    match_ball_speed:
      description: Defines the speed of the ball in the match.
      type: integer
      format: int32
      minimum: 1
      maximum: 100
      examples:
        - value: 50
    match_max_duration:
      description: Maximum allowable duration (seconds) for the match.
      type: integer
      format: int32
      minimum: 60
      maximum: 3600
      examples:
        - value: 300
    match_starting_health_points:
      description: Initial health or lives given to each player at the start of the match.
      type: integer
      format: int32
      minimum: 1
      maximum: 100
      examples:
        - value: 3

    player_health_points:
      description: Current health points of the player.
      type: integer
      format: int32
      minimum: 0
      maximum: 100
      examples:
        - value: 2

    tournament_id:
      description: Unique identifier for the tournament (UUID format or similar).
      type: string
      format: uuid
      examples:
        - value: "550e8400-e29b-41d4-a716-446655440000"
    tournament_mode:
      description: Format of the tournament.
      type: string
      enum: [single_elimination, knockout, king_of_the_hill, ladder, round_robin]
      examples:
        - value: "single_elimination"
        - value: "knockout"
        - value: "king_of_the_hill"
        - value: "ladder"
        - value: "round_robin"
    tournament_status:
      description: Current status of the tournament.
      type: string
      enum: [ongoing, completed, interrupted]
      examples:
        - value: "ongoing"
        - value: "completed"
        - value: "interrupted"
    timestamp:
      description: Timestamp in unix timestamp format.
      type: integer
      format: int64
      examples:
        - value: 1630000000
    
    two_factor_auth_status:
      description: Status of the 2FA authentication for the user.
      type: boolean
      examples:
        - value: true
    
    qr_code:
      description: URL to the QR code image.
      type: string
      format: uri
      examples:
        - value: "https://example.com/qr_code.png"
      
    totp_code:
      description: TOTP code generated by the user for 2FA authentication.
      type: string #string because it can contain leading zeros
      examples:
        - value: "012345"
    
    totp_secret:
      description: TOTP secret key for generating 2FA codes.
      type: string
      examples:
        - value: otpauth://totp/{issuer}:{account}?secret={secret}&issuer={issuer}
    
    totp_key:
      description: Represents a 2FA private key for a user.
      type: object
      properties:
        qr_code:
          $ref: "#/components/schemas/qr_code"
        secret:
          $ref: "#/components/schemas/totp_secret"
    
    PublicUser:
      description: Represents a public user profile with limited information.
      type: object
      properties: 
        user_id:
          $ref: "#/components/schemas/user_id"
        display_name:
          $ref: "#/components/schemas/user_display_name"
        avatar:
          $ref: "#/components/schemas/user_avatar"
        status:
          $ref: "#/components/schemas/user_status"
        last_active:
          $ref: "#/components/schemas/timestamp"
        registered_timestamp:
          $ref: "#/components/schemas/timestamp"
      required: [user_id, display_name, avatar, status, last_active, registered_timestamp]

    PrivateUser:
      description: Represents a private user profile with additional information.
      type: object
      allOf:
        - $ref: "#/components/schemas/PublicUser"
        - properties:
            email:
              $ref: "#/components/schemas/user_email"
            two_factor_auth:
              $ref: "#/components/schemas/two_factor_auth_status"
          additionalProperties: false
      required: [user_id, display_name, avatar, status, last_active, email, two_factor_auth]

    MatchSettings:
      type: object
      description: Settings and configurations for the match, such as ball speed, match duration, and player health.
      properties:
        ball_speed:
          $ref: "#/components/schemas/match_ball_speed"
        max_duration:
          $ref: "#/components/schemas/match_max_duration"
        starting_health:
          $ref: "#/components/schemas/match_starting_health_points"
    
    Match:
      type: object
      description: Represents a match of Pong between two players.
      properties:
        id:
          $ref: "#/components/schemas/match_id"
        websocket_url:
          $ref: "#/components/schemas/websocket_url"
        players:
          type: array
          description: Array of the players in the match.
          items:
            $ref: "#/components/schemas/PublicUser"
        status:
          $ref: "#/components/schemas/match_status"
        started_timestamp:
          $ref: "#/components/schemas/timestamp"
        finished_timestamp:
          $ref: "#/components/schemas/timestamp"
        settings:
          $ref: "#/components/schemas/MatchSettings"
        leaderboard:
          type: array
          description: Array of user_ids in the order of their scores.
          items:
            $ref: "#/components/schemas/user_id"
      required: [match_id, players, status, started_timestamp, match_settings]

    Tournament:
      type: object
      description: Represents a Pong tournament, containing multiple matches and players.
      properties:
        tournament_id:
          $ref: "#/components/schemas/tournament_id"
        tournament_mode:
          $ref: "#/components/schemas/tournament_mode"
        matches:
          type: array
          description: Array of all the tournament matches.
          items:
            $ref: "#/components/schemas/Match"
        status:
          $ref: "#/components/schemas/tournament_status"
        started_timestamp:
          $ref: "#/components/schemas/timestamp"
        finished_timestamp:
          $ref: "#/components/schemas/timestamp"
        leaderboard:
          type: array
          description: Array of user_ids in the order of their scores.
          items:
            $ref: "#/components/schemas/user_id"
      required: [tournament_id, tournament_mode, matches, status, started_timestamp]

    user_sorting_options:
      description: Options to sort the users list.
      type: string
      enum: [display_name, email, registered_timestamp, last_active]
      examples:
        - value: "display_name"
        - value: "email"
        - value: "registered_timestamp"
        - value: "last_active"

    user_filter_options:
      description: Options to filter the users list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/user_status"

    friends_sorting_options:
      description: Options to sort the friends list.
      type: string
      enum: [display_name, registered_timestamp, last_active]
      examples:
        - value: "display_name"
        - value: "registered_timestamp"
        - value: "last_active"

    friends_filter_options:
      description: Options to filter the friends list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/user_status"

    match_sorting_options:
      description: Options to sort the matches list.
      type: string
      enum: [age, duration]
      examples:
        - value: "age"
        - value: "duration"

    match_filter_options:
      description: Options to filter the matches list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/match_status"
    
    user_match_filter_options:
      type: object
      allOf:
        - $ref: "#/components/schemas/match_filter_options"
        - type: object
          properties:
            leaderboard_position:
              type: integer
              format: int32
              minimum: 1
              description: "Position of the user in the leaderboard. (better than)"

    tournament_sorting_options:
      description: Options to sort the tournaments list.
      type: string
      enum: [age, duration, number_of_players]
      examples:
        - value: "age"
        - value: "duration"
        - value: "number_of_players"
    
    tournament_filter_options:
      description: Options to filter the tournaments list.
      type: object
      properties:
        status:
          $ref: "#/components/schemas/tournament_status"
        mode:
          $ref: "#/components/schemas/tournament_mode"
    
    user_tournament_filter_options:
      type: object
      allOf:
        - $ref: "#/components/schemas/tournament_filter_options"
        - type: object
          properties:
            leaderboard_position:
              type: integer
              format: int32
              minimum: 1
              description: "Position of the user in the leaderboard. (better than)"
    
    error_message:
      description: Error message returned by the API.
      type: string
      examples:
        - value: "User not found."
    
    async_call_outcome:
      description: Outcome of an asynchronous call.
      type: string
      enum: [success, failure]
      examples:
        - value: "success"
        - value: "failure"
    
    async_call_success:
      type: object
      properties:
        outcome:
          $ref: "#/components/schemas/async_call_outcome"
      required: [outcome]
      additionalProperties: true
    
    async_call_failure:
      type: object
      properties:
        outcome:
          $ref: "#/components/schemas/async_call_outcome"
        error_message:
          $ref: "#/components/schemas/error_message"
      required: [outcome, error_message]
      additionalProperties: false
    
    # =========================
    # = Call-Specific Objects =
    # =========================
  
    UpdateUserProfile:
      type: object
      properties:
        display_name:
          $ref: "#/components/schemas/user_display_name"
        avatar:
          $ref: "#/components/schemas/user_avatar"
      required: []

    UpdateUserPassword:
      type: object
      properties:
        current_password:
          $ref: "#/components/schemas/user_psw"
        new_password:
          $ref: "#/components/schemas/user_psw"
      required: [current_password, new_password]

    RegisterUser:
      type: object
      description: Data for registering a new user.
      properties:
        email:
          $ref: "#/components/schemas/user_email"
        password:
          $ref: "#/components/schemas/user_psw"
        display_name:
          $ref: "#/components/schemas/user_display_name"
      required: [email, password, display_name]
  
  headers:
    X-Rate-Limit-Limit:
      description: Maximum number of requests allowed in the current window.
      schema:
        type: integer
        format: int32
        minimum: 1
      example: 100

    X-Rate-Limit-Remaining:
      description: Remaining number of requests allowed in the current window.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 99

    X-Rate-Limit-Reset:
      description: Time in seconds until the rate limit resets.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 60

    X-Rate-Limit-Interval:
      description: Time interval in seconds for the rate limit window.
      schema:
        type: integer
        format: int32
        minimum: 1
      example: 60
  
    Retry-After:
      description: Time in seconds until the client can retry the request.
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 60
  
  responses:

    TooManyRequests:
      description: Rate limit exceeded. Too many requests in a given time window.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'
        Retry-After:
          $ref: '#/components/headers/Retry-After'

    Unauthorized:
      description: Unauthorized. JWT token is missing or invalid.
      headers:
        X-Rate-Limit-Limit:
          $ref: '#/components/headers/X-Rate-Limit-Limit'
        X-Rate-Limit-Remaining:
          $ref: '#/components/headers/X-Rate-Limit-Remaining'
        X-Rate-Limit-Reset:
          $ref: '#/components/headers/X-Rate-Limit-Reset'
        X-Rate-Limit-Interval:
          $ref: '#/components/headers/X-Rate-Limit-Interval'

  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT used for authorization. Send the token in the `Authorization` header with the format `Bearer {token}`.

security:
  - jwtAuth: []